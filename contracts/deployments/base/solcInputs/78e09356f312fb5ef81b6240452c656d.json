{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nstruct Collection {\r\n\taddress collectionAddress;\r\n}\r\n\r\ninterface IProtocol {\r\n\tfunction updateRevenue(\r\n\t\tuint256 marketplaceFee,\r\n\t\tuint256 collectionFee,\r\n\t\taddress _collection\r\n\t) external;\r\n\r\n\tfunction calculateFee(\r\n\t\taddress _collection,\r\n\t\tuint256 _price,\r\n\t\tuint256 _protocolFee\r\n\t)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256 amount, uint256 marketplaceFee, uint256 collectionFee);\r\n\r\n\tfunction isSupportedProtocol(address _address) external view returns (bool);\r\n\r\n\tfunction getCollectionData(\r\n\t\taddress _collection\r\n\t) external view returns (Collection memory);\r\n}\r\n"
    },
    "contracts/interfaces/ITokenLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface ITokenLocker {\r\n    function deposit(\r\n        address _collection,\r\n        uint[] calldata _tokens,\r\n        uint _unlock,\r\n        address _user\r\n    ) external returns (bytes32);\r\n\r\n    function withdraw(bytes32 _lockId) external;\r\n\r\n    function liquidate(bytes32 _lockId, address _recipient) external;\r\n}\r\n\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n}"
    },
    "contracts/p2plending.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"./interfaces/ITokenLocker.sol\";\r\nimport \"./interfaces/IProtocol.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\n\r\ncontract P2PLending is Context, ReentrancyGuard, Pausable {\r\n\t//Libraries\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\tusing EnumerableSet for EnumerableSet.Bytes32Set;\r\n\tusing Address for address;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t//State Variables\r\n\tITokenLocker private TokenLocker; //Token locker contract used to hold collateral\r\n\tIERC20 private immutable WETH;\r\n\tIProtocol private Protocol;\r\n\t// Interest rates are multiplied by 100 to give padding to interest rates below 1: 0.1, 0.001\r\n\tuint16 private securityFee = 200; // 2% == 200;\r\n\tuint16 private protocolFee = 1000; // 10% == 1000;\r\n\tuint8 private minExpiryDay = 7;\r\n\tuint8 private maxExpiryDay = 90;\r\n\tuint private minBorrowAmount = 100000000 gwei; // 0.1 ETH\r\n\tuint16 private constant aprDivider = 10000; // 100% == 10000;\r\n\tuint16 private minInterest = 100; // 1% == 100;\r\n\r\n\taddress private admin;\r\n\r\n\tconstructor(address _TokenLocker, address _WETH, address _Protocol) {\r\n\t\tTokenLocker = ITokenLocker(_TokenLocker);\r\n\t\tProtocol = IProtocol(_Protocol);\r\n\t\tWETH = IERC20(_WETH);\r\n\t\tadmin = _msgSender();\r\n\t}\r\n\r\n\t//Events\r\n\tevent ContractOpened(\r\n\t\tbytes32 indexed id,\r\n\t\taddress indexed borrower,\r\n\t\tbytes32 indexed lockId,\r\n\t\tuint amount,\r\n\t\tuint16 interest,\r\n\t\tuint expiry\r\n\t);\r\n\tevent ContractClosed(bytes32 indexed id);\r\n\tevent ContractActive(\r\n\t\tbytes32 indexed id,\r\n\t\taddress indexed lender,\r\n\t\tuint16 interest,\r\n\t\tuint expiry,\r\n\t\tuint checkPointBlock\r\n\t);\r\n\tevent BidOpened(\r\n\t\tbytes32 indexed id,\r\n\t\taddress indexed bidder,\r\n\t\tuint16 proposedInterest\r\n\t);\r\n\tevent BidClosed(bytes32 indexed id, address indexed bidder);\r\n\tevent LostBid(bytes32 indexed id, address indexed bidder, uint amount);\r\n\tevent LoanRepaid(bytes32 indexed id, uint repaidInterest);\r\n\tevent Liquidate(bytes32 indexed id);\r\n\tevent UpdateProtocolFees(uint16 securityFee, uint16 protocolFee);\r\n\tevent UpdateProtocolBorrowParameters(\r\n\t\tuint16 minInterest,\r\n\t\tuint minBorrowAmount\r\n\t);\r\n\tevent UpdateProtocolDateParameters(uint8 minExpiryDay, uint8 maxExpiryDay);\r\n\r\n\terror Unauthorized(address creator);\r\n\terror ActiveLoan(bytes32 id);\r\n\terror InactiveLoan(bytes32 id);\r\n\terror LoanContractActive(bytes32 id);\r\n\terror LoanContractInactive(bytes32 id);\r\n\terror InvalidPeriod(uint8 invalidPeriod);\r\n\terror InvalidInterest(uint16 invalidInterest);\r\n\t//Struct and Mapping\r\n\tstruct LoanContract {\r\n\t\taddress borrower;\r\n\t\taddress lender;\r\n\t\taddress collection;\r\n\t\tuint16 interest;\r\n\t\tuint amount;\r\n\t\tuint expiry;\r\n\t\tuint checkPointBlock;\r\n\t\tmapping(address => uint16) bids;\r\n\t\tEnumerableSet.AddressSet bidders;\r\n\t\tbytes32 lockId;\r\n\t}\r\n\tstruct UserBids {\r\n\t\tmapping(bytes32 => uint16) proposedInterest;\r\n\t\tuint withdrawableBids;\r\n\t}\r\n\tmapping(bytes32 => LoanContract) private borrowContract;\r\n\tmapping(address => UserBids) private bids;\r\n\tmapping(address => EnumerableSet.Bytes32Set) private userLoanIds;\r\n\t//Modifiers\r\n\tmodifier canOpenContract(\r\n\t\tuint _amount,\r\n\t\tuint8 _expiry,\r\n\t\tuint16 _interest\r\n\t) {\r\n\t\trequire(_amount >= minBorrowAmount);\r\n\t\tif (_expiry < minExpiryDay && _expiry > maxExpiryDay) {\r\n\t\t\trevert InvalidPeriod(_expiry);\r\n\t\t}\r\n\t\tif (_interest < minInterest && _interest > aprDivider) {\r\n\t\t\trevert InvalidInterest(_interest);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tmodifier canOpenBid(uint16 _interest, bytes32 _id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tif (_loanContract.borrower == address(0)) {\r\n\t\t\trevert LoanContractInactive(_id);\r\n\t\t}\r\n\t\tif (_loanContract.borrower == _msgSender()) {\r\n\t\t\trevert Unauthorized(_msgSender());\r\n\t\t}\r\n\t\tif (_loanContract.lender != address(0)) {\r\n\t\t\trevert ActiveLoan(_id);\r\n\t\t}\r\n\t\tif (_interest < minInterest && _interest > aprDivider) {\r\n\t\t\trevert InvalidInterest(_interest);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tmodifier canLend(bytes32 _id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tif (_loanContract.borrower == address(0)) {\r\n\t\t\trevert LoanContractInactive(_id);\r\n\t\t}\r\n\t\tif (_loanContract.lender != address(0)) {\r\n\t\t\trevert ActiveLoan(_id);\r\n\t\t}\r\n\t\tif (_loanContract.borrower == _msgSender()) {\r\n\t\t\trevert Unauthorized(_msgSender());\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tmodifier canBeClosed(bytes32 _id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tif (_loanContract.borrower != _msgSender()) {\r\n\t\t\trevert Unauthorized(_msgSender());\r\n\t\t}\r\n\t\tif (_loanContract.lender != address(0)) {\r\n\t\t\trevert ActiveLoan(_id);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tmodifier canBeRepaid(bytes32 _id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tif (_loanContract.borrower == address(0)) {\r\n\t\t\trevert LoanContractInactive(_id);\r\n\t\t}\r\n\t\tif (_loanContract.borrower != _msgSender()) {\r\n\t\t\trevert Unauthorized(_msgSender());\r\n\t\t}\r\n\t\tif (_loanContract.lender == address(0)) {\r\n\t\t\trevert InactiveLoan(_id);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tmodifier canBeLiquidated(bytes32 _id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tif (_loanContract.lender != _msgSender()) {\r\n\t\t\trevert Unauthorized(_msgSender());\r\n\t\t}\r\n\t\tif (block.timestamp < _loanContract.expiry) {\r\n\t\t\trevert ActiveLoan(_id);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tmodifier isAdmin() {\r\n\t\tif (_msgSender() != admin) {\r\n\t\t\trevert Unauthorized(_msgSender());\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t//Helper functions\r\n\tfunction _clearBids(\r\n\t\tLoanContract storage _loanContract,\r\n\t\tbytes32 _mappingId\r\n\t) private {\r\n\t\tuint length = _loanContract.bidders.length();\r\n\t\tuint _amount = _loanContract.amount;\r\n\t\tfor (uint i; i < length; ) {\r\n\t\t\taddress _bidder = _loanContract.bidders.at(0);\r\n\t\t\t_loanContract.bidders.remove(_bidder);\r\n\t\t\tUserBids storage _userBids = bids[_bidder];\r\n\t\t\t_userBids.proposedInterest[_mappingId] = 0;\r\n\t\t\t_userBids.withdrawableBids += _amount;\r\n\t\t\temit LostBid(_mappingId, _bidder, _amount);\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getInterest(\r\n\t\tLoanContract storage _account\r\n\t) private view returns (uint) {\r\n\t\tuint interestToPay = 0;\r\n\t\tif (_account.lender == address(0)) {\r\n\t\t\treturn interestToPay;\r\n\t\t}\r\n\t\tuint totalInterest = (_account.interest * _account.amount) / aprDivider;\r\n\t\tuint interestPerBlock = totalInterest / 10512000;\r\n\t\tuint totalBlocks = block.number - _account.checkPointBlock;\r\n\t\tinterestToPay = interestPerBlock * totalBlocks;\r\n\t\treturn interestToPay;\r\n\t}\r\n\r\n\t//User functions\r\n\tfunction openContract(\r\n\t\taddress _collection,\r\n\t\tuint[] calldata _tokens,\r\n\t\tuint _amountToBorrow,\r\n\t\tuint8 _expiryInDays,\r\n\t\tuint16 _interestToPay\r\n\t)\r\n\t\texternal\r\n\t\twhenNotPaused\r\n\t\tnonReentrant\r\n\t\tcanOpenContract(_amountToBorrow, _expiryInDays, _interestToPay)\r\n\t{\r\n\t\tbytes32 _lockId = TokenLocker.deposit(\r\n\t\t\t_collection,\r\n\t\t\t_tokens,\r\n\t\t\t0,\r\n\t\t\t_msgSender()\r\n\t\t);\r\n\t\tbytes32 mappingId = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\t_msgSender(),\r\n\t\t\t\t_collection,\r\n\t\t\t\t_amountToBorrow,\r\n\t\t\t\t_expiryInDays,\r\n\t\t\t\t_interestToPay,\r\n\t\t\t\tblock.timestamp\r\n\t\t\t)\r\n\t\t);\r\n\t\tLoanContract storage _loanContract = borrowContract[mappingId];\r\n\t\tuint expiry = uint256(_expiryInDays);\r\n\t\t_loanContract.borrower = _msgSender();\r\n\t\t_loanContract.interest = _interestToPay;\r\n\t\t_loanContract.amount = _amountToBorrow;\r\n\t\t_loanContract.expiry = expiry;\r\n\t\t_loanContract.lockId = _lockId;\r\n\t\t_loanContract.collection = _collection;\r\n\t\tuserLoanIds[_msgSender()].add(mappingId);\r\n\t\temit ContractOpened(\r\n\t\t\tmappingId,\r\n\t\t\t_msgSender(),\r\n\t\t\t_lockId,\r\n\t\t\t_amountToBorrow,\r\n\t\t\t_interestToPay,\r\n\t\t\texpiry\r\n\t\t);\r\n\t}\r\n\r\n\tfunction bidInETH(\r\n\t\tuint16 _proposedInterest,\r\n\t\tbytes32 _id\r\n\t) external payable whenNotPaused nonReentrant {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tuint16 prevApr = _loanContract.bids[_msgSender()];\r\n\t\tuint _amount = _loanContract.amount;\r\n\t\tif (prevApr == 0) {\r\n\t\t\trequire(msg.value >= _amount);\r\n\t\t\taddress weth = address(WETH);\r\n\t\t\tIWETH(weth).deposit{ value: _amount }();\r\n\t\t}\r\n\t\t_openBid(_proposedInterest, _id, _loanContract);\r\n\t}\r\n\r\n\tfunction bidInWETH(\r\n\t\tuint16 _proposedInterest,\r\n\t\tbytes32 _id\r\n\t) external whenNotPaused nonReentrant {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tuint16 prevApr = _loanContract.bids[_msgSender()];\r\n\t\tif (prevApr == 0) {\r\n\t\t\tWETH.safeTransferFrom(\r\n\t\t\t\t_msgSender(),\r\n\t\t\t\taddress(this),\r\n\t\t\t\t_loanContract.amount\r\n\t\t\t);\r\n\t\t}\r\n\t\t_openBid(_proposedInterest, _id, _loanContract);\r\n\t}\r\n\r\n\tfunction _openBid(\r\n\t\tuint16 _proposedInterest,\r\n\t\tbytes32 _id,\r\n\t\tLoanContract storage _loanContract\r\n\t) private canOpenBid(_proposedInterest, _id) {\r\n\t\t_loanContract.bids[_msgSender()] = _proposedInterest;\r\n\t\t_loanContract.bidders.add(_msgSender());\r\n\t\tbids[_msgSender()].proposedInterest[_id] = _proposedInterest;\r\n\t\temit BidOpened(_id, _msgSender(), _proposedInterest);\r\n\t}\r\n\r\n\tfunction cancelBid(bytes32 _id) external nonReentrant {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\trequire(_loanContract.bidders.contains(_msgSender()));\r\n\t\t_loanContract.bidders.remove(_msgSender());\r\n\t\t_loanContract.bids[_msgSender()] = 0;\r\n\t\tbids[_msgSender()].proposedInterest[_id] = 0;\r\n\t\tWETH.safeTransfer(_msgSender(), _loanContract.amount);\r\n\t\temit BidClosed(_id, _msgSender());\r\n\t}\r\n\r\n\tfunction acceptBid(address _bidder, bytes32 _id) external nonReentrant {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\trequire(_loanContract.bidders.contains(_bidder));\r\n\t\t_loanContract.interest = _loanContract.bids[_bidder];\r\n\t\t_loanContract.bidders.remove(_bidder);\r\n\t\t_clearBids(_loanContract, _id);\r\n\t\t_lend(_id, _loanContract, _bidder);\r\n\t}\r\n\r\n\tfunction lendInWETH(\r\n\t\tbytes32 _id\r\n\t) external whenNotPaused nonReentrant canLend(_id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tWETH.safeTransferFrom(\r\n\t\t\t_msgSender(),\r\n\t\t\taddress(this),\r\n\t\t\t_loanContract.amount\r\n\t\t);\r\n\t\t_clearBids(_loanContract, _id);\r\n\t\t_lend(_id, _loanContract, _msgSender());\r\n\t}\r\n\r\n\tfunction lendInETH(\r\n\t\tbytes32 _id\r\n\t) external payable whenNotPaused nonReentrant canLend(_id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tuint _amount = _loanContract.amount;\r\n\t\trequire(msg.value >= _amount);\r\n\t\taddress weth = address(WETH);\r\n\t\tIWETH(weth).deposit{ value: _amount }();\r\n\t\t_clearBids(_loanContract, _id);\r\n\t\t_lend(_id, _loanContract, _msgSender());\r\n\t}\r\n\r\n\tfunction _lend(\r\n\t\tbytes32 _id,\r\n\t\tLoanContract storage _loanContract,\r\n\t\taddress _lender\r\n\t) private {\r\n\t\tuint amount = _loanContract.amount;\r\n\t\tuint expiry = block.timestamp + _loanContract.expiry * 1 days;\r\n\t\tuint _securityFee = (amount * securityFee) / aprDivider;\r\n\t\tuint borrowableAmount = amount - _securityFee;\r\n\t\t_loanContract.expiry = expiry;\r\n\t\t_loanContract.checkPointBlock = block.number;\r\n\t\t_loanContract.lender = _lender;\r\n\t\tWETH.safeTransfer(_loanContract.borrower, borrowableAmount);\r\n\t\temit ContractActive(\r\n\t\t\t_id,\r\n\t\t\t_lender,\r\n\t\t\t_loanContract.interest,\r\n\t\t\texpiry,\r\n\t\t\tblock.number\r\n\t\t);\r\n\t}\r\n\r\n\tfunction closeContract(bytes32 _id) external nonReentrant canBeClosed(_id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\t_clearBids(_loanContract, _id);\r\n\t\t_closeContract(_id, _loanContract);\r\n\t\temit ContractClosed(_id);\r\n\t}\r\n\r\n\tfunction _closeContract(\r\n\t\tbytes32 _id,\r\n\t\tLoanContract storage _loanContract\r\n\t) private {\r\n\t\tbytes32 _lockId = _loanContract.lockId;\r\n\t\tdelete borrowContract[_id];\r\n\t\tuserLoanIds[_msgSender()].remove(_id);\r\n\t\tTokenLocker.withdraw(_lockId);\r\n\t}\r\n\r\n\tfunction repayLoan(bytes32 _id) external nonReentrant canBeRepaid(_id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tuint interest = _getInterest(_loanContract);\r\n\t\tuint amountBorrowed = _loanContract.amount;\r\n\t\tuint total = interest + amountBorrowed;\r\n\t\tWETH.safeTransferFrom(_msgSender(), address(this), total);\r\n\t\tuint _securityFee = (amountBorrowed * securityFee) / aprDivider;\r\n\t\tuint repayableInterest = _updateRevenue(\r\n\t\t\t_loanContract.collection,\r\n\t\t\tinterest,\r\n\t\t\tprotocolFee\r\n\t\t);\r\n\t\tuint repayableAmount = total - repayableInterest;\r\n\t\tWETH.safeTransfer(_loanContract.lender, repayableAmount);\r\n\t\tWETH.safeTransfer(_msgSender(), _securityFee);\r\n\t\t_closeContract(_id, _loanContract);\r\n\t\temit LoanRepaid(_id, interest);\r\n\t}\r\n\r\n\tfunction _updateRevenue(\r\n\t\taddress _collection,\r\n\t\tuint _amount,\r\n\t\tuint _lendingFee\r\n\t) private returns (uint) {\r\n\t\t(uint256 amount, uint256 ProtocolFee, uint256 collectionFee) = Protocol.calculateFee(_collection, _amount, _lendingFee);\r\n\t\tuint256 totalFees = ProtocolFee + collectionFee;\r\n\t\tWETH.safeTransfer(address(Protocol), totalFees);\r\n\t\tProtocol.updateRevenue(ProtocolFee, collectionFee, _collection);\r\n\t\treturn amount;\r\n\t}\r\n\r\n\tfunction liquidate(bytes32 _id) external nonReentrant canBeLiquidated(_id) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\tuint _securityFee = (_loanContract.amount * securityFee) / aprDivider;\r\n\t\tuint liquidationRefund = _updateRevenue(\r\n\t\t\t_loanContract.collection,\r\n\t\t\t_securityFee,\r\n\t\t\tprotocolFee\r\n\t\t);\r\n\t\tbytes32 _lockId = _loanContract.lockId;\r\n\t\tuserLoanIds[_loanContract.borrower].remove(_id);\r\n\t\tdelete borrowContract[_id];\r\n\t\tTokenLocker.liquidate(_lockId, _msgSender());\r\n\t\tWETH.safeTransfer(_msgSender(), liquidationRefund);\r\n\t\temit Liquidate(_id);\r\n\t}\r\n\r\n\tfunction withdrawLostBids() external nonReentrant {\r\n\t\tUserBids storage _userBids = bids[_msgSender()];\r\n\t\tuint lostBidsValue = _userBids.withdrawableBids;\r\n\t\trequire(lostBidsValue > 0);\r\n\t\t_userBids.withdrawableBids = 0;\r\n\t\tWETH.safeTransfer(_msgSender(), lostBidsValue);\r\n\t}\r\n\r\n\t//Read functions\r\n\tfunction getInterest(bytes32 _id) external view returns (uint) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\treturn _getInterest(_loanContract);\r\n\t}\r\n\r\n\tfunction getLoanData(\r\n\t\tbytes32 _id\r\n\t) external view returns (address, address, uint, uint, uint, bytes32) {\r\n\t\tLoanContract storage _loanContract = borrowContract[_id];\r\n\t\taddress _borrower = _loanContract.borrower;\r\n\t\taddress _lender = _loanContract.lender;\r\n\t\tuint _interest = _loanContract.interest;\r\n\t\tuint _amount = _loanContract.amount;\r\n\t\tuint _expiry = _loanContract.expiry;\r\n\t\tbytes32 _lockId = _loanContract.lockId;\r\n\t\treturn (_borrower, _lender, _interest, _amount, _expiry, _lockId);\r\n\t}\r\n\r\n\tfunction getLostBidsValue(address _bidder) external view returns (uint) {\r\n\t\tuint lostBidsValue = bids[_bidder].withdrawableBids;\r\n\t\treturn lostBidsValue;\r\n\t}\r\n\r\n\tfunction getUserActiveLoanIds(\r\n\t\taddress _borrower\r\n\t) external view returns (bytes32[] memory ids) {\r\n\t\tuint length = userLoanIds[_borrower].length();\r\n\t\tids = new bytes32[](length);\r\n\t\tfor (uint i; i < length; ) {\r\n\t\t\tids[i] = userLoanIds[_borrower].at(i);\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getAdmin() external view returns (address) {\r\n\t\treturn admin;\r\n\t}\r\n\r\n\t//Admin functions\r\n\tfunction updateFee(\r\n\t\tuint16 _securityFee,\r\n\t\tuint16 _protocolFee\r\n\t) external isAdmin {\r\n\t\trequire(\r\n\t\t\t_securityFee >= 1 && _securityFee <= 10,\r\n\t\t\t\"security fee params are out of bound\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_protocolFee >= 1 && _protocolFee <= 30,\r\n\t\t\t\"protocol fee params are out of bound\"\r\n\t\t);\r\n\t\tsecurityFee = _securityFee;\r\n\t\tprotocolFee = _protocolFee;\r\n\t\temit UpdateProtocolFees(_securityFee, _protocolFee);\r\n\t}\r\n\r\n\tfunction updateInterestAndMinBorrowAmount(\r\n\t\tuint16 _minInterest,\r\n\t\tuint _minBorrowAmount\r\n\t) external isAdmin {\r\n\t\trequire(\r\n\t\t\t_minInterest >= 1 && _minInterest <= aprDivider,\r\n\t\t\t\"minimum interest params are out of bounds\"\r\n\t\t);\r\n\t\trequire(_minBorrowAmount >= 1 gwei, \"minimum borrow is not in bounds\");\r\n\t\tminInterest = _minInterest;\r\n\t\tminBorrowAmount = _minBorrowAmount;\r\n\t\temit UpdateProtocolBorrowParameters(_minInterest, _minBorrowAmount);\r\n\t}\r\n\r\n\tfunction updateExpiryDays(uint8 _min, uint8 _max) external isAdmin {\r\n\t\trequire(_min >= 7 && _max < 255, \"params are out of bounds\");\r\n\t\tminExpiryDay = _min;\r\n\t\tmaxExpiryDay = _max;\r\n\t\temit UpdateProtocolDateParameters(_min, _max);\r\n\t}\r\n\r\n\tfunction updateAdmin(address _admin) external isAdmin {\r\n\t\trequire(_admin != address(0), \"Address 0 not allowed\");\r\n\t\tadmin = _admin;\r\n\t}\r\n\r\n\tfunction updateTokenLocker(address _TokenLocker) external isAdmin {\r\n\t\trequire(_TokenLocker != address(0), \"Address 0 not allowed\");\r\n\t\tTokenLocker = ITokenLocker(_TokenLocker);\r\n\t}\r\n\r\n\tfunction updateProtocol(address _Protocol) external isAdmin {\r\n\t\trequire(_Protocol != address(0), \"Address 0 not allowed\");\r\n\t\tProtocol = IProtocol(_Protocol);\r\n\t}\r\n\r\n\tfunction recoverToken(address _token) external whenPaused isAdmin {\r\n\t\trequire(_token != address(WETH), \"WETH cannot be recovered\");\r\n\t\tif (_token == address(0)) {\r\n\t\t\tuint etherBalance = address(this).balance;\r\n\t\t\trequire(etherBalance > 0, \"Ether balance is 0\");\r\n\t\t\t(bool sent, ) = admin.call{ value: etherBalance }(\"\");\r\n\t\t\trequire(sent, \"Failed to send Ether\");\r\n\t\t} else {\r\n\t\t\tIERC20 token = IERC20(_token);\r\n\t\t\tuint balanceOf = token.balanceOf(address(this));\r\n\t\t\ttoken.safeTransfer(_msgSender(), balanceOf);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction pause() external whenNotPaused isAdmin {\r\n\t\t_pause();\r\n\t}\r\n\r\n\tfunction unpause() external whenPaused isAdmin {\r\n\t\t_unpause();\r\n\t}\r\n}\r\n\r\n// When a user bid is accepted, in the subgraph, account for it by checking if a userBid schema is active for that specific address\r\n"
    },
    "contracts/Protocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\ninterface IWETH {\r\n\tfunction deposit() external payable;\r\n}\r\n\r\ncontract DistantFinance is Context, Ownable, Pausable, ReentrancyGuard {\r\n\t// Libraries\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\tusing Address for address;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// Variables\r\n\taddress private immutable WETH; // Native ERC20 token for protocols\r\n\tuint16 public protocolFee; // Protocol fee\r\n\taddress public admin; // Protocol controller\r\n\tuint16 private constant minFees = 0; // 1% == 100 etc.\r\n\tuint16 private constant maxFees = 1000; // 1000 == 10%\r\n\taddress private proxyAdmin; // Protocol data management\r\n\taddress private revenueCollector; // Protocol revenue collector\r\n\r\n\t// Enums\r\n\tenum Status {\r\n\t\tUnverified,\r\n\t\tVerified\r\n\t}\r\n\r\n\t// Events\r\n\tevent CollectionAdded(\r\n\t\taddress indexed collection,\r\n\t\taddress collectionFeeCollector,\r\n\t\tuint256 royaltyFees\r\n\t);\r\n\tevent CollectionUpdated(\r\n\t\taddress indexed collection,\r\n\t\taddress collectionFeeCollector,\r\n\t\tuint256 royaltyFees\r\n\t);\r\n\tevent CollectionVerificationStatus(\r\n\t\taddress indexed collection,\r\n\t\tStatus status,\r\n\t\tstring ipfs\r\n\t);\r\n\tevent CollectionRemoved(address indexed collection);\r\n\tevent protocolFeeUpdated(uint256 fees);\r\n\tevent RevenueWithdrawn(address indexed account, uint256 amount);\r\n\tevent ProtocolRemoved(address indexed protocol);\r\n\tevent ProtocolCreated(\r\n\t\taddress indexed protocol,\r\n\t\tstring name,\r\n\t\tuint16 protocolFee,\r\n\t\tuint16 securityFee\r\n\t);\r\n\r\n\t// Constructor\r\n\t/**\r\n\t * @notice Constructor for the Protocol\r\n\t * @param _protocolFee fee to be in counts of 100: 1% == 100, 10% = 1000\r\n\t * @param _admin address of the proxy admin\r\n\t * @param _WETH address of the _WETH token\r\n\t * @param _revenueCollector address of the revenue collector\r\n\t */\r\n\tconstructor(\r\n\t\tuint16 _protocolFee, // fee to be in counts of 100: 1% = 100, 10% = 1000\r\n\t\taddress _admin,\r\n\t\taddress _WETH,\r\n\t\taddress _revenueCollector\r\n\t) {\r\n\t\tprotocolFee = _protocolFee;\r\n\t\tadmin = _msgSender();\r\n\t\tproxyAdmin = _admin;\r\n\t\tWETH = _WETH;\r\n\t\trevenueCollector = _revenueCollector;\r\n\t\tOwnable(_msgSender());\r\n\t}\r\n\r\n\t// Structs\r\n\t// A struct that tracks the royalty fees collection address, its royalty fees and state of its verification. Paramount for future updates when making the Protocol decentralized\r\n\tstruct Collection {\r\n\t\taddress collectionAddress;\r\n\t\tuint256 royaltyFees;\r\n\t\tStatus status;\r\n\t}\r\n\t// An address set of all supported collections\r\n\tEnumerableSet.AddressSet private collections;\r\n\r\n\t// data mappings\r\n\t// tracks the revenue generation for the protocol and the collection royalty fees\r\n\tmapping(address => uint256) private revenue;\r\n\t// Maps a collection address to its information\r\n\tmapping(address => Collection) private collection;\r\n\t// All supported in-house contracts\r\n\tmapping(address => bool) private isProtocol;\r\n\r\n\t/// All read functions\r\n\tfunction getAccountRevenue(\r\n\t\taddress _account\r\n\t) external view returns (uint256) {\r\n\t\treturn revenue[_account];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Get all collections supported by the Protocol\r\n\t */\r\n\tfunction getSupportedCollections()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address[] memory _supportedCollections)\r\n\t{\r\n\t\tuint256 length = collections.length();\r\n\t\t_supportedCollections = new address[](length);\r\n\t\tfor (uint256 i; i < length; i++) {\r\n\t\t\t_supportedCollections[i] = collections.at(i);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @notice a public getter function to get a collection information from the collection mapping\r\n\t * @param _collection address to check offer from\r\n\t */\r\n\tfunction getCollectionData(\r\n\t\taddress _collection\r\n\t) public view returns (Collection memory) {\r\n\t\treturn collection[_collection];\r\n\t}\r\n\r\n\t// Modifiers\r\n\t// modifier to check that only admin can call the function\r\n\tmodifier isAdmin() {\r\n\t\trequire(_msgSender() == admin, \"Caller != Admin\");\r\n\t\t_;\r\n\t}\r\n\t// modifier to check that only proxy admin can call the function\r\n\tmodifier isProxyAdmin() {\r\n\t\trequire(_msgSender() == proxyAdmin, \"Caller != Proxy Admin\");\r\n\t\t_;\r\n\t}\r\n\t// modifier to check if a collection is supported\r\n\tmodifier isCollection(address _collection) {\r\n\t\trequire(collections.contains(_collection), \"Collection not supported\");\r\n\t\t_;\r\n\t}\r\n\t// modifier to limit certain external functions from being called by external users\r\n\tmodifier isProtocolCall() {\r\n\t\trequire(isSupportedProtocol(_msgSender()));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isSupportedProtocol(address _address) public view returns (bool) {\r\n\t\treturn isProtocol[_address];\r\n\t}\r\n\r\n\tfunction updateRevenue(\r\n\t\tuint256 ProtocolFee,\r\n\t\tuint256 collectionFee,\r\n\t\taddress _collection\r\n\t) external isProtocolCall {\r\n\t\t_updateRevenue(ProtocolFee, collectionFee, _collection);\r\n\t}\r\n\r\n\tfunction _updateRevenue(\r\n\t\tuint256 ProtocolFee,\r\n\t\tuint256 collectionFee,\r\n\t\taddress _collection\r\n\t) private {\r\n\t\tif (collectionFee != 0) {\r\n\t\t\taddress collectionFeeCollector = collection[_collection]\r\n\t\t\t\t.collectionAddress;\r\n\t\t\trevenue[collectionFeeCollector] += collectionFee;\r\n\t\t}\r\n\t\tif (ProtocolFee != 0) {\r\n\t\t\trevenue[revenueCollector] += ProtocolFee;\r\n\t\t}\r\n\t}\r\n\r\n\r\n// fee to be in counts of 100: 1% = 100, 10% = 1000\r\n\tfunction calculateFee(\r\n\t\taddress _collection,\r\n\t\tuint256 _value,\r\n\t\tuint256 _protocolFee\r\n\t)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 amount, uint256 ProtocolFee, uint256 collectionFee)\r\n\t{\r\n\t\tProtocolFee = (_value * _protocolFee) / 10000;\r\n\t\tcollectionFee = (_value * collection[_collection].royaltyFees) / 10000;\r\n\t\tamount = _value - (ProtocolFee + collectionFee);\r\n\t}\r\n\r\n\t/** \r\n        @notice Add a collection to the Protocol\r\n        @param _collection address of the collection\r\n        @param _collectionAddress address of the royalty fees receiver\r\n        @param _royaltyFees uint256 of the royalty fees\r\n    */\r\n\tfunction addCollection(\r\n\t\taddress _collection,\r\n\t\taddress _collectionAddress,\r\n\t\tuint256 _royaltyFees\r\n\t) external whenNotPaused isAdmin {\r\n\t\trequire(!collections.contains(_collection), \"Collection exists\");\r\n\t\trequire(\r\n\t\t\tIERC721(_collection).supportsInterface(0x80ac58cd),\r\n\t\t\t\"not supported\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_royaltyFees >= minFees && _royaltyFees <= (maxFees - protocolFee),\r\n\t\t\t\"fees error\"\r\n\t\t);\r\n\t\tcollections.add(_collection);\r\n\t\tcollection[_collection] = Collection(\r\n\t\t\t_collectionAddress,\r\n\t\t\t_royaltyFees,\r\n\t\t\tStatus.Unverified\r\n\t\t);\r\n\t\temit CollectionAdded(_collection, _collectionAddress, _royaltyFees);\r\n\t}\r\n\r\n\t/** \r\n        @notice Update a collection to the Protocol\r\n        @param _collection address of the collection\r\n        @param _collectionAddress address of the royalty fees receiver\r\n        @param _royaltyFees uint256 of the royalty fees\r\n    */\r\n\tfunction updateCollection(\r\n\t\taddress _collection,\r\n\t\taddress _collectionAddress,\r\n\t\tuint256 _royaltyFees\r\n\t) external whenNotPaused isCollection(_collection) isAdmin {\r\n\t\trequire(\r\n\t\t\t_royaltyFees >= minFees && _royaltyFees <= (maxFees - protocolFee),\r\n\t\t\t\"high fees\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_msgSender() == collection[_collection].collectionAddress,\r\n\t\t\t\"Only Collection admin can update\"\r\n\t\t);\r\n\t\tcollection[_collection] = Collection(\r\n\t\t\t_collectionAddress,\r\n\t\t\t_royaltyFees,\r\n\t\t\tStatus.Unverified\r\n\t\t);\r\n\t\temit CollectionUpdated(_collection, _collectionAddress, _royaltyFees);\r\n\t}\r\n\r\n\t/** \r\n        @notice Remove a collection from the Protocol\r\n        @param _collection address of the collection\r\n    */\r\n\tfunction removeCollection(\r\n\t\taddress _collection\r\n\t) external whenNotPaused isAdmin isCollection(_collection) {\r\n\t\tcollections.remove(_collection);\r\n\t\tdelete (collection[_collection]);\r\n\t\temit CollectionRemoved(_collection);\r\n\t}\r\n\r\n\t/** \r\n        @notice Verify a collection from the Protocol\r\n        @param _collection address of the collection\r\n    */\r\n\tfunction verifyCollectionStatus(\r\n\t\taddress _collection,\r\n\t\tstring calldata _ipfsHash\r\n\t) external isAdmin isCollection(_collection) {\r\n\t\tCollection storage collectionStatus = collection[_collection];\r\n\t\tcollectionStatus.status = Status.Verified;\r\n\t\temit CollectionVerificationStatus(\r\n\t\t\t_collection,\r\n\t\t\tcollectionStatus.status,\r\n\t\t\t_ipfsHash\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Withdraw revenue generated from the Protocol\r\n\t */\r\n\tfunction withdrawRevenue() external whenNotPaused nonReentrant {\r\n\t\tuint256 revenueGenerated = revenue[_msgSender()];\r\n\t\trequire(revenueGenerated != 0, \"revenue = 0\");\r\n\t\trevenue[_msgSender()] = 0;\r\n\t\tIERC20(WETH).safeTransfer(_msgSender(), revenueGenerated);\r\n\t\temit RevenueWithdrawn(_msgSender(), revenueGenerated);\r\n\t}\r\n\r\n\t//OnlyOwner function calls\r\n\t/** \r\n        @notice update the protocol fee\r\n        @param _newprotocolFee uint16 of the new protocol fee\r\n    */\r\n\tfunction updateprotocolFee(\r\n\t\tuint16 _newprotocolFee\r\n\t) external whenPaused onlyOwner {\r\n\t\tprotocolFee = _newprotocolFee;\r\n\t\temit protocolFeeUpdated(_newprotocolFee);\r\n\t}\r\n\r\n\t/** \r\n        @notice update the admin address\r\n        @param _newAdmin address of the new admin\r\n    */\r\n\tfunction updateAdmin(address _newAdmin) external whenPaused onlyOwner {\r\n\t\tadmin = _newAdmin;\r\n\t}\r\n\r\n\t/** \r\n        @notice update the proxy admin address\r\n        @param _newAdmin address of the new admin\r\n    */\r\n\tfunction updateProxyAdmin(address _newAdmin) external whenPaused onlyOwner {\r\n\t\tproxyAdmin = _newAdmin;\r\n\t}\r\n\r\n\t/** \r\n        @notice update the revenue collector address\r\n        @param _newRevenueCollector address of the new revenue collector\r\n    */\r\n\tfunction updateRevenueCollector(\r\n\t\taddress _newRevenueCollector\r\n\t) external whenPaused onlyOwner {\r\n\t\trevenueCollector = _newRevenueCollector;\r\n\t}\r\n\r\n\tfunction addProtocol(\r\n\t\taddress _protocol,\r\n\t\tstring calldata _name,\r\n\t\tuint16 _protocolFee,\r\n\t\tuint16 _securityFee\r\n\t) external onlyOwner {\r\n\t\tisProtocol[_protocol] = true;\r\n\t\temit ProtocolCreated(_protocol, _name, _protocolFee, _securityFee);\r\n\t}\r\n\r\n\tfunction removeProtocol(address _protocol) external onlyOwner {\r\n\t\tisProtocol[_protocol] = false;\r\n\t\temit ProtocolRemoved(_protocol);\r\n\t}\r\n\r\n\t/** \r\n        @notice recover any ERC20 token sent to the contract\r\n        @param _token address of the token to recover\r\n    */\r\n\tfunction recoverToken(address _token) external whenPaused onlyOwner {\r\n\t\trequire(_token != WETH, \"Cannot recover\");\r\n\t\tif (_token == address(0)) {\r\n\t\t\tuint etherBalance = address(this).balance;\r\n\t\t\trequire(etherBalance > 0, \"Ether balance is 0\");\r\n\t\t\t(bool sent, ) = admin.call{ value: etherBalance }(\"\");\r\n\t\t\trequire(sent, \"Failed to send Ether\");\r\n\t\t} else {\r\n\t\t\tIERC20 token = IERC20(_token);\r\n\t\t\tuint balanceOf = token.balanceOf(address(this));\r\n\t\t\ttoken.safeTransfer(_msgSender(), balanceOf);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction pause() external whenNotPaused onlyOwner {\r\n\t\t_pause();\r\n\t}\r\n\r\n\tfunction unpause() external whenPaused onlyOwner {\r\n\t\t_unpause();\r\n\t}\r\n}\r\n"
    },
    "contracts/TokenLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"./interfaces/IProtocol.sol\";\r\n\r\ncontract TokenLockerContract is ERC721Holder, Context, ReentrancyGuard {\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\tusing EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n\taddress public admin;\r\n\tIProtocol public Protocol; // Main Contract address for the IProtocol interface\r\n\r\n\tconstructor(address _Protocol) {\r\n\t\tProtocol = IProtocol(_Protocol);\r\n\t\tadmin = msg.sender;\r\n\t}\r\n\r\n\tevent Deposit(\r\n\t\tbytes32 indexed lockId,\r\n\t\taddress indexed user,\r\n\t\taddress indexed protocol,\r\n\t\taddress collection,\r\n\t\tuint[] tokens,\r\n\t\tuint lockPeriod\r\n\t);\r\n\tevent Withdraw(bytes32 indexed lockId);\r\n\tevent Liquidate(bytes32 lockId, address recipient);\r\n\r\n\terror Unauthorized(address caller);\r\n\r\n\tstruct LockedTokens {\r\n\t\taddress owner;\r\n\t\taddress collection;\r\n\t\tuint[] tokens;\r\n\t\tuint lockTime;\r\n\t}\r\n\r\n\tmapping(bytes32 => LockedTokens) private lockedTokens;\r\n\tmapping(address => EnumerableSet.Bytes32Set) private lockIds;\r\n\r\n\tmodifier isAdmin() {\r\n\t\tif (_msgSender() != admin) revert Unauthorized(_msgSender());\r\n\t\t_;\r\n\t}\r\n\tmodifier idExists(bytes32 _id) {\r\n\t\trequire(lockIds[_msgSender()].contains(_id));\r\n\t\t_;\r\n\t}\r\n\tmodifier isProtocol() {\r\n\t\tbool isProtocolSupported = Protocol.isSupportedProtocol(_msgSender());\r\n\t\tif (!isProtocolSupported) {\r\n\t\t\trevert Unauthorized(_msgSender());\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\tmodifier isSupportedCollection(address _collection) {\r\n\t\trequire(\r\n\t\t\tProtocol.getCollectionData(_collection).collectionAddress !=\r\n\t\t\t\taddress(0)\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _withdraw(\r\n\t\taddress _collection,\r\n\t\tuint[] storage _tokens,\r\n\t\taddress _recipient\r\n\t) private {\r\n\t\tIERC721 nft = IERC721(_collection);\r\n\t\tuint length = _tokens.length;\r\n\t\tfor (uint i; i < length; ) {\r\n\t\t\tuint tokenId = _tokens[i];\r\n\t\t\tnft.safeTransferFrom(address(this), _recipient, tokenId);\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _deposit(\r\n\t\taddress _collection,\r\n\t\tuint[] calldata _tokens,\r\n\t\taddress _ownerOf\r\n\t) private {\r\n\t\tIERC721 nft = IERC721(_collection);\r\n\t\tuint length = _tokens.length;\r\n\t\tfor (uint i; i < length; ) {\r\n\t\t\tuint tokenId = _tokens[i];\r\n\t\t\tnft.safeTransferFrom(_ownerOf, address(this), tokenId);\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction deposit(\r\n\t\taddress _collection,\r\n\t\tuint[] calldata _tokens,\r\n\t\tuint _unlock,\r\n\t\taddress _ownerOf\r\n\t)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t\tisSupportedCollection(_collection)\r\n\t\treturns (bytes32 lockId)\r\n\t{\r\n\t\trequire(_tokens.length > 0);\r\n\t\tlockId = keccak256(\r\n\t\t\tabi.encode(_ownerOf, _collection, _tokens, _unlock, block.number)\r\n\t\t);\r\n\t\tlockIds[_msgSender()].add(lockId);\r\n\t\tLockedTokens storage lockTokens = lockedTokens[lockId];\r\n\t\tuint __lockTime = 0;\r\n\t\taddress __protocol = address(0);\r\n\t\tbool isProtocolSupported = Protocol.isSupportedProtocol(_msgSender());\r\n\t\tif (isProtocolSupported) {\r\n\t\t\t__protocol = _msgSender();\r\n\t\t} else {\r\n\t\t\trequire(_unlock >= 7);\r\n\t\t\trequire(_ownerOf == _msgSender());\r\n\t\t\t__lockTime = block.timestamp + _unlock * 1 days;\r\n\t\t}\r\n\t\t_deposit(_collection, _tokens, _ownerOf);\r\n\t\tlockTokens.collection = _collection;\r\n\t\tlockTokens.owner = _ownerOf;\r\n\t\tlockTokens.tokens = _tokens;\r\n\t\tlockTokens.lockTime = __lockTime;\r\n\t\temit Deposit(\r\n\t\t\tlockId,\r\n\t\t\t_ownerOf,\r\n\t\t\t__protocol,\r\n\t\t\t_collection,\r\n\t\t\t_tokens,\r\n\t\t\t__lockTime\r\n\t\t);\r\n\t}\r\n\r\n\tfunction withdraw(bytes32 _lockId) external nonReentrant idExists(_lockId) {\r\n\t\tLockedTokens storage lockTokens = lockedTokens[_lockId];\r\n\t\taddress _ownerOf = lockTokens.owner;\r\n\t\tbool isProtocolSupported = Protocol.isSupportedProtocol(_msgSender());\r\n\t\tif (!isProtocolSupported) {\r\n\t\t\tif (_ownerOf != _msgSender()) {\r\n\t\t\t\trevert Unauthorized(_msgSender());\r\n\t\t\t}\r\n\t\t\trequire(block.timestamp > lockTokens.lockTime);\r\n\t\t}\r\n\t\t_withdraw(lockTokens.collection, lockTokens.tokens, _ownerOf);\r\n\t\tlockIds[_msgSender()].remove(_lockId);\r\n\t\tdelete lockedTokens[_lockId];\r\n\t\temit Withdraw(_lockId);\r\n\t}\r\n\r\n\tfunction liquidate(\r\n\t\tbytes32 _lockId,\r\n\t\taddress _recipient\r\n\t) external nonReentrant isProtocol {\r\n\t\tLockedTokens storage lockTokens = lockedTokens[_lockId];\r\n\t\t_withdraw(lockTokens.collection, lockTokens.tokens, _recipient);\r\n\t\tlockIds[_msgSender()].remove(_lockId);\r\n\t\tdelete lockedTokens[_lockId];\r\n\t\temit Liquidate(_lockId, _recipient);\r\n\t}\r\n\r\n\tfunction updateProtocol(address _Protocol) external isAdmin {\r\n\t\tProtocol = IProtocol(_Protocol);\r\n\t}\r\n\tfunction updateAdmin(address _newAdmin) external isAdmin {\r\n\t\tadmin = _newAdmin;\r\n\t}\r\n\r\n\tfunction getLockedIds(\r\n\t\taddress locker\r\n\t) external view returns (bytes32[] memory _lockIds) {\r\n\t\tuint length = lockIds[locker].length();\r\n\t\t_lockIds = new bytes32[](length);\r\n\t\tfor (uint i; i < length; ) {\r\n\t\t\t_lockIds[i] = lockIds[locker].at(i);\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction getLockedTokensData(\r\n\t\tbytes32 _id\r\n\t) external view returns (LockedTokens memory lockTokens) {\r\n\t\tlockTokens = lockedTokens[_id];\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "metadata",
          "evm.methodIdentifiers",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "paris",
    "metadata": {
      "useLiteralContent": true
    }
  }
}