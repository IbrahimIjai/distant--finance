{
  "address": "0xCd4b65980dc32861d384a499b49900b7CdD48632",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TokenLocker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Protocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ActiveLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "InactiveLoan",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "invalidInterest",
          "type": "uint16"
        }
      ],
      "name": "InvalidInterest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "invalidPeriod",
          "type": "uint8"
        }
      ],
      "name": "InvalidPeriod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "LoanContractActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "LoanContractInactive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "BidClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "proposedInterest",
          "type": "uint16"
        }
      ],
      "name": "BidOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "interest",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "checkPointBlock",
          "type": "uint256"
        }
      ],
      "name": "ContractActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ContractClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "lockId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "interest",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "ContractOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaidInterest",
          "type": "uint256"
        }
      ],
      "name": "LoanRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LostBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minInterest",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBorrowAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdateProtocolBorrowParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "minExpiryDay",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "maxExpiryDay",
          "type": "uint8"
        }
      ],
      "name": "UpdateProtocolDateParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "securityFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "protocolFee",
          "type": "uint16"
        }
      ],
      "name": "UpdateProtocolFees",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "acceptBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_proposedInterest",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "bidInETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_proposedInterest",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "bidInWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "cancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "closeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "getLostBidsValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getUserActiveLoanIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "ids",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getUserLoanIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "lendInETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "lendInWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokens",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountToBorrow",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_expiryInDays",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_interestToPay",
          "type": "uint16"
        }
      ],
      "name": "openContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "updateExpiryDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_securityFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_protocolFee",
          "type": "uint16"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_minInterest",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minBorrowAmount",
          "type": "uint256"
        }
      ],
      "name": "updateInterestAndMinBorrowAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Protocol",
          "type": "address"
        }
      ],
      "name": "updateProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TokenLocker",
          "type": "address"
        }
      ],
      "name": "updateTokenLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLostBids",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c2f7273f22fb697de3faa047e6d64168efea2cc3bd03ee47d718218f9870f89",
  "receipt": {
    "to": null,
    "from": "0xe726c27385c740A9C3B026891BA0e366B344E318",
    "contractAddress": "0xCd4b65980dc32861d384a499b49900b7CdD48632",
    "transactionIndex": 64,
    "gasUsed": "2693157",
    "logsBloom": "0x
    "blockHash": "0xa7850b38422da03d1c06d3910096c8378b3bf5904f1660dfd63835a56e3c964a",
    "transactionHash": "0x6c2f7273f22fb697de3faa047e6d64168efea2cc3bd03ee47d718218f9870f89",
    "logs": [],
    "blockNumber": 20970246,
    "cumulativeGasUsed": "11944304",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD80c83efc80Da4166Ab44848f3aaA0320A679E3f",
    "0x4200000000000000000000000000000000000006",
    "0x1f9d7C7c02405BD8CE2E40705F500078B098876a"
  ],
  "numDeployments": 2,
  "solcInputHash": "0eca44e0d9f0280e8fb431aca2c305c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenLocker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Protocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ActiveLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"InactiveLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"invalidInterest\",\"type\":\"uint16\"}],\"name\":\"InvalidInterest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"invalidPeriod\",\"type\":\"uint8\"}],\"name\":\"InvalidPeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"LoanContractActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"LoanContractInactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proposedInterest\",\"type\":\"uint16\"}],\"name\":\"BidOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"interest\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkPointBlock\",\"type\":\"uint256\"}],\"name\":\"ContractActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ContractClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"interest\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"ContractOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaidInterest\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LostBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minInterest\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBorrowAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateProtocolBorrowParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minExpiryDay\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxExpiryDay\",\"type\":\"uint8\"}],\"name\":\"UpdateProtocolDateParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"securityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"}],\"name\":\"UpdateProtocolFees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_proposedInterest\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"bidInETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_proposedInterest\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"bidInWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"closeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getLoanData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getLostBidsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getUserActiveLoanIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getUserLoanIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"lendInETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"lendInWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_expiryInDays\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_interestToPay\",\"type\":\"uint16\"}],\"name\":\"openContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"updateExpiryDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_securityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_protocolFee\",\"type\":\"uint16\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_minInterest\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minBorrowAmount\",\"type\":\"uint256\"}],\"name\":\"updateInterestAndMinBorrowAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Protocol\",\"type\":\"address\"}],\"name\":\"updateProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenLocker\",\"type\":\"address\"}],\"name\":\"updateTokenLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLostBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/p2plending.sol\":\"P2PLending\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nstruct Collection {\\r\\n\\taddress collectionAddress;\\r\\n}\\r\\n\\r\\ninterface IProtocol {\\r\\n\\tfunction updateRevenue(\\r\\n\\t\\tuint256 marketplaceFee,\\r\\n\\t\\tuint256 collectionFee,\\r\\n\\t\\taddress _collection\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction calculateFee(\\r\\n\\t\\taddress _collection,\\r\\n\\t\\tuint256 _price,\\r\\n\\t\\tuint256 _protocolFee\\r\\n\\t)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 amount, uint256 marketplaceFee, uint256 collectionFee);\\r\\n\\r\\n\\tfunction isSupportedProtocol(address _address) external view returns (bool);\\r\\n\\r\\n\\tfunction getCollectionData(\\r\\n\\t\\taddress _collection\\r\\n\\t) external view returns (Collection memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x0d90e34fec56c35ae096851305299bf9296d104ef051e748375b75fa13ded4da\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface ITokenLocker {\\r\\n    function deposit(\\r\\n        address _collection,\\r\\n        uint[] calldata _tokens,\\r\\n        uint _unlock,\\r\\n        address _user\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function withdraw(bytes32 _lockId) external;\\r\\n\\r\\n    function liquidate(bytes32 _lockId, address _recipient) external;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x0b2c84af0af99f2a5e642050d87e418e2490fd81160dbf5e4e118396a681eeba\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n}\",\"keccak256\":\"0xf9704e5559b92ef50980ee54944f3c9aa3c84bc748996189b700f8d8cb176fc7\",\"license\":\"MIT\"},\"contracts/p2plending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"./interfaces/ITokenLocker.sol\\\";\\r\\nimport \\\"./interfaces/IProtocol.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\n\\r\\ncontract P2PLending is Context, ReentrancyGuard, Pausable {\\r\\n\\t//Libraries\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\tusing Address for address;\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\t//State Variables\\r\\n\\tITokenLocker private TokenLocker; //Token locker contract used to hold collateral\\r\\n\\tIERC20 private immutable WETH;\\r\\n\\tIProtocol private Protocol;\\r\\n\\t// Interest rates are multiplied by 100 to give padding to interest rates below 1: 0.1, 0.001\\r\\n\\tuint16 private securityFee = 200; // 2% == 200;\\r\\n\\tuint16 private protocolFee = 1000; // 10% == 1000;\\r\\n\\tuint8 private minExpiryDay = 7;\\r\\n\\tuint8 private maxExpiryDay = 90;\\r\\n\\tuint private minBorrowAmount = 100000000 gwei; // 0.1 ETH\\r\\n\\tuint16 private constant aprDivider = 10000; // 100% == 10000;\\r\\n\\tuint16 private minInterest = 100; // 1% == 100;\\r\\n\\r\\n\\taddress private admin;\\r\\n\\r\\n\\tconstructor(address _TokenLocker, address _WETH, address _Protocol) {\\r\\n\\t\\tTokenLocker = ITokenLocker(_TokenLocker);\\r\\n\\t\\tProtocol = IProtocol(_Protocol);\\r\\n\\t\\tWETH = IERC20(_WETH);\\r\\n\\t\\tadmin = _msgSender();\\r\\n\\t}\\r\\n\\r\\n\\t//Events\\r\\n\\tevent ContractOpened(\\r\\n\\t\\tbytes32 indexed id,\\r\\n\\t\\taddress indexed borrower,\\r\\n\\t\\tbytes32 indexed lockId,\\r\\n\\t\\tuint amount,\\r\\n\\t\\tuint16 interest,\\r\\n\\t\\tuint expiry\\r\\n\\t);\\r\\n\\tevent ContractClosed(bytes32 indexed id);\\r\\n\\tevent ContractActive(\\r\\n\\t\\tbytes32 indexed id,\\r\\n\\t\\taddress indexed lender,\\r\\n\\t\\tuint16 interest,\\r\\n\\t\\tuint expiry,\\r\\n\\t\\tuint checkPointBlock\\r\\n\\t);\\r\\n\\tevent BidOpened(\\r\\n\\t\\tbytes32 indexed id,\\r\\n\\t\\taddress indexed bidder,\\r\\n\\t\\tuint16 proposedInterest\\r\\n\\t);\\r\\n\\tevent BidClosed(bytes32 indexed id, address indexed bidder);\\r\\n\\tevent LostBid(bytes32 indexed id, address indexed bidder, uint amount);\\r\\n\\tevent LoanRepaid(bytes32 indexed id, uint repaidInterest);\\r\\n\\tevent Liquidate(bytes32 indexed id);\\r\\n\\tevent UpdateProtocolFees(uint16 securityFee, uint16 protocolFee);\\r\\n\\tevent UpdateProtocolBorrowParameters(\\r\\n\\t\\tuint16 minInterest,\\r\\n\\t\\tuint minBorrowAmount\\r\\n\\t);\\r\\n\\tevent UpdateProtocolDateParameters(uint8 minExpiryDay, uint8 maxExpiryDay);\\r\\n\\r\\n\\terror Unauthorized(address creator);\\r\\n\\terror ActiveLoan(bytes32 id);\\r\\n\\terror InactiveLoan(bytes32 id);\\r\\n\\terror LoanContractActive(bytes32 id);\\r\\n\\terror LoanContractInactive(bytes32 id);\\r\\n\\terror InvalidPeriod(uint8 invalidPeriod);\\r\\n\\terror InvalidInterest(uint16 invalidInterest);\\r\\n\\t//Struct and Mapping\\r\\n\\tstruct LoanContract {\\r\\n\\t\\taddress borrower;\\r\\n\\t\\taddress lender;\\r\\n\\t\\taddress collection;\\r\\n\\t\\tuint16 interest;\\r\\n\\t\\tuint amount;\\r\\n\\t\\tuint expiry;\\r\\n\\t\\tuint checkPointBlock;\\r\\n\\t\\tmapping(address => uint16) bids;\\r\\n\\t\\tEnumerableSet.AddressSet bidders;\\r\\n\\t\\tbytes32 lockId;\\r\\n\\t}\\r\\n\\tstruct UserBids {\\r\\n\\t\\tmapping(bytes32 => uint16) proposedInterest;\\r\\n\\t\\tuint withdrawableBids;\\r\\n\\t}\\r\\n\\tmapping(bytes32 => LoanContract) private borrowContract;\\r\\n\\tmapping(address => UserBids) private bids;\\r\\n\\tmapping(address => EnumerableSet.Bytes32Set) private userLoanIds;\\r\\n\\r\\n\\t//Modifiers\\r\\n\\tmodifier canOpenContract(\\r\\n\\t\\tuint _amount,\\r\\n\\t\\tuint8 _expiry,\\r\\n\\t\\tuint16 _interest\\r\\n\\t) {\\r\\n\\t\\trequire(_amount >= minBorrowAmount);\\r\\n\\t\\tif (_expiry < minExpiryDay && _expiry > maxExpiryDay) {\\r\\n\\t\\t\\trevert InvalidPeriod(_expiry);\\r\\n\\t\\t}\\r\\n\\t\\tif (_interest < minInterest && _interest > aprDivider) {\\r\\n\\t\\t\\trevert InvalidInterest(_interest);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier canOpenBid(uint16 _interest, bytes32 _id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tif (_loanContract.borrower == address(0)) {\\r\\n\\t\\t\\trevert LoanContractInactive(_id);\\r\\n\\t\\t}\\r\\n\\t\\tif (_loanContract.borrower == _msgSender()) {\\r\\n\\t\\t\\trevert Unauthorized(_msgSender());\\r\\n\\t\\t}\\r\\n\\t\\tif (_loanContract.lender != address(0)) {\\r\\n\\t\\t\\trevert ActiveLoan(_id);\\r\\n\\t\\t}\\r\\n\\t\\tif (_interest < minInterest && _interest > aprDivider) {\\r\\n\\t\\t\\trevert InvalidInterest(_interest);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\tmodifier canLend(bytes32 _id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tif (_loanContract.borrower == address(0)) {\\r\\n\\t\\t\\trevert LoanContractInactive(_id);\\r\\n\\t\\t}\\r\\n\\t\\tif (_loanContract.lender != address(0)) {\\r\\n\\t\\t\\trevert ActiveLoan(_id);\\r\\n\\t\\t}\\r\\n\\t\\tif (_loanContract.borrower == _msgSender()) {\\r\\n\\t\\t\\trevert Unauthorized(_msgSender());\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\tmodifier canBeClosed(bytes32 _id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tif (_loanContract.borrower != _msgSender()) {\\r\\n\\t\\t\\trevert Unauthorized(_msgSender());\\r\\n\\t\\t}\\r\\n\\t\\tif (_loanContract.lender != address(0)) {\\r\\n\\t\\t\\trevert ActiveLoan(_id);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\tmodifier canBeRepaid(bytes32 _id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tif (_loanContract.borrower == address(0)) {\\r\\n\\t\\t\\trevert LoanContractInactive(_id);\\r\\n\\t\\t}\\r\\n\\t\\tif (_loanContract.borrower != _msgSender()) {\\r\\n\\t\\t\\trevert Unauthorized(_msgSender());\\r\\n\\t\\t}\\r\\n\\t\\tif (_loanContract.lender == address(0)) {\\r\\n\\t\\t\\trevert InactiveLoan(_id);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\tmodifier canBeLiquidated(bytes32 _id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tif (_loanContract.lender != _msgSender()) {\\r\\n\\t\\t\\trevert Unauthorized(_msgSender());\\r\\n\\t\\t}\\r\\n\\t\\tif (block.timestamp < _loanContract.expiry) {\\r\\n\\t\\t\\trevert ActiveLoan(_id);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\tmodifier isAdmin() {\\r\\n\\t\\tif (_msgSender() != admin) {\\r\\n\\t\\t\\trevert Unauthorized(_msgSender());\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t//Helper functions\\r\\n\\tfunction _clearBids(\\r\\n\\t\\tLoanContract storage _loanContract,\\r\\n\\t\\tbytes32 _mappingId\\r\\n\\t) private {\\r\\n\\t\\tuint length = _loanContract.bidders.length();\\r\\n\\t\\tuint _amount = _loanContract.amount;\\r\\n\\t\\tfor (uint i; i < length; ) {\\r\\n\\t\\t\\taddress _bidder = _loanContract.bidders.at(0);\\r\\n\\t\\t\\t_loanContract.bidders.remove(_bidder);\\r\\n\\t\\t\\tUserBids storage _userBids = bids[_bidder];\\r\\n\\t\\t\\t_userBids.proposedInterest[_mappingId] = 0;\\r\\n\\t\\t\\t_userBids.withdrawableBids += _amount;\\r\\n\\t\\t\\temit LostBid(_mappingId, _bidder, _amount);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getInterest(\\r\\n\\t\\tLoanContract storage _account\\r\\n\\t) private view returns (uint) {\\r\\n\\t\\tuint interestToPay = 0;\\r\\n\\t\\tif (_account.lender == address(0)) {\\r\\n\\t\\t\\treturn interestToPay;\\r\\n\\t\\t}\\r\\n\\t\\tuint totalInterest = (_account.interest * _account.amount) / aprDivider;\\r\\n\\t\\tuint interestPerBlock = totalInterest / 10512000;\\r\\n\\t\\tuint totalBlocks = block.number - _account.checkPointBlock;\\r\\n\\t\\tinterestToPay = interestPerBlock * totalBlocks;\\r\\n\\t\\treturn interestToPay;\\r\\n\\t}\\r\\n\\r\\n\\t//User functions\\r\\n\\tfunction openContract(\\r\\n\\t\\taddress _collection,\\r\\n\\t\\tuint[] calldata _tokens,\\r\\n\\t\\tuint _amountToBorrow,\\r\\n\\t\\tuint8 _expiryInDays,\\r\\n\\t\\tuint16 _interestToPay\\r\\n\\t)\\r\\n\\t\\texternal\\r\\n\\t\\twhenNotPaused\\r\\n\\t\\tnonReentrant\\r\\n\\t\\tcanOpenContract(_amountToBorrow, _expiryInDays, _interestToPay)\\r\\n\\t{\\r\\n\\t\\tbytes32 _lockId = TokenLocker.deposit(\\r\\n\\t\\t\\t_collection,\\r\\n\\t\\t\\t_tokens,\\r\\n\\t\\t\\t0,\\r\\n\\t\\t\\t_msgSender()\\r\\n\\t\\t);\\r\\n\\t\\tbytes32 mappingId = keccak256(\\r\\n\\t\\t\\tabi.encode(\\r\\n\\t\\t\\t\\t_msgSender(),\\r\\n\\t\\t\\t\\t_collection,\\r\\n\\t\\t\\t\\t_amountToBorrow,\\r\\n\\t\\t\\t\\t_expiryInDays,\\r\\n\\t\\t\\t\\t_interestToPay,\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[mappingId];\\r\\n\\t\\tuint expiry = uint256(_expiryInDays);\\r\\n\\t\\t_loanContract.borrower = _msgSender();\\r\\n\\t\\t_loanContract.interest = _interestToPay;\\r\\n\\t\\t_loanContract.amount = _amountToBorrow;\\r\\n\\t\\t_loanContract.expiry = expiry;\\r\\n\\t\\t_loanContract.lockId = _lockId;\\r\\n\\t\\t_loanContract.collection = _collection;\\r\\n\\t\\tuserLoanIds[_msgSender()].add(mappingId);\\r\\n\\t\\temit ContractOpened(\\r\\n\\t\\t\\tmappingId,\\r\\n\\t\\t\\t_msgSender(),\\r\\n\\t\\t\\t_lockId,\\r\\n\\t\\t\\t_amountToBorrow,\\r\\n\\t\\t\\t_interestToPay,\\r\\n\\t\\t\\texpiry\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction bidInETH(\\r\\n\\t\\tuint16 _proposedInterest,\\r\\n\\t\\tbytes32 _id\\r\\n\\t) external payable whenNotPaused nonReentrant {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tuint16 prevApr = _loanContract.bids[_msgSender()];\\r\\n\\t\\tuint _amount = _loanContract.amount;\\r\\n\\t\\tif (prevApr == 0) {\\r\\n\\t\\t\\trequire(msg.value >= _amount);\\r\\n\\t\\t\\taddress weth = address(WETH);\\r\\n\\t\\t\\tIWETH(weth).deposit{ value: _amount }();\\r\\n\\t\\t}\\r\\n\\t\\t_openBid(_proposedInterest, _id, _loanContract);\\r\\n\\t}\\r\\n\\r\\n\\tfunction bidInWETH(\\r\\n\\t\\tuint16 _proposedInterest,\\r\\n\\t\\tbytes32 _id\\r\\n\\t) external whenNotPaused nonReentrant {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tuint16 prevApr = _loanContract.bids[_msgSender()];\\r\\n\\t\\tif (prevApr == 0) {\\r\\n\\t\\t\\tWETH.safeTransferFrom(\\r\\n\\t\\t\\t\\t_msgSender(),\\r\\n\\t\\t\\t\\taddress(this),\\r\\n\\t\\t\\t\\t_loanContract.amount\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t\\t_openBid(_proposedInterest, _id, _loanContract);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _openBid(\\r\\n\\t\\tuint16 _proposedInterest,\\r\\n\\t\\tbytes32 _id,\\r\\n\\t\\tLoanContract storage _loanContract\\r\\n\\t) private canOpenBid(_proposedInterest, _id) {\\r\\n\\t\\t_loanContract.bids[_msgSender()] = _proposedInterest;\\r\\n\\t\\t_loanContract.bidders.add(_msgSender());\\r\\n\\t\\tbids[_msgSender()].proposedInterest[_id] = _proposedInterest;\\r\\n\\t\\temit BidOpened(_id, _msgSender(), _proposedInterest);\\r\\n\\t}\\r\\n\\r\\n\\tfunction cancelBid(bytes32 _id) external nonReentrant {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\trequire(_loanContract.bidders.contains(_msgSender()));\\r\\n\\t\\t_loanContract.bidders.remove(_msgSender());\\r\\n\\t\\t_loanContract.bids[_msgSender()] = 0;\\r\\n\\t\\tbids[_msgSender()].proposedInterest[_id] = 0;\\r\\n\\t\\tWETH.safeTransfer(_msgSender(), _loanContract.amount);\\r\\n\\t\\temit BidClosed(_id, _msgSender());\\r\\n\\t}\\r\\n\\r\\n\\tfunction acceptBid(address _bidder, bytes32 _id) external nonReentrant {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\trequire(_loanContract.bidders.contains(_bidder));\\r\\n\\t\\t_loanContract.interest = _loanContract.bids[_bidder];\\r\\n\\t\\t_loanContract.bidders.remove(_bidder);\\r\\n\\t\\t_clearBids(_loanContract, _id);\\r\\n\\t\\t_lend(_id, _loanContract, _bidder);\\r\\n\\t}\\r\\n\\r\\n\\tfunction lendInWETH(\\r\\n\\t\\tbytes32 _id\\r\\n\\t) external whenNotPaused nonReentrant canLend(_id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tWETH.safeTransferFrom(\\r\\n\\t\\t\\t_msgSender(),\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\t_loanContract.amount\\r\\n\\t\\t);\\r\\n\\t\\t_clearBids(_loanContract, _id);\\r\\n\\t\\t_lend(_id, _loanContract, _msgSender());\\r\\n\\t}\\r\\n\\r\\n\\tfunction lendInETH(\\r\\n\\t\\tbytes32 _id\\r\\n\\t) external payable whenNotPaused nonReentrant canLend(_id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tuint _amount = _loanContract.amount;\\r\\n\\t\\trequire(msg.value >= _amount);\\r\\n\\t\\taddress weth = address(WETH);\\r\\n\\t\\tIWETH(weth).deposit{ value: _amount }();\\r\\n\\t\\t_clearBids(_loanContract, _id);\\r\\n\\t\\t_lend(_id, _loanContract, _msgSender());\\r\\n\\t}\\r\\n\\r\\n\\tfunction _lend(\\r\\n\\t\\tbytes32 _id,\\r\\n\\t\\tLoanContract storage _loanContract,\\r\\n\\t\\taddress _lender\\r\\n\\t) private {\\r\\n\\t\\tuint amount = _loanContract.amount;\\r\\n\\t\\tuint expiry = block.timestamp + _loanContract.expiry * 1 days;\\r\\n\\t\\tuint _securityFee = (amount * securityFee) / aprDivider;\\r\\n\\t\\tuint borrowableAmount = amount - _securityFee;\\r\\n\\t\\t_loanContract.expiry = expiry;\\r\\n\\t\\t_loanContract.checkPointBlock = block.number;\\r\\n\\t\\t_loanContract.lender = _lender;\\r\\n\\t\\tWETH.safeTransfer(_loanContract.borrower, borrowableAmount);\\r\\n\\t\\temit ContractActive(\\r\\n\\t\\t\\t_id,\\r\\n\\t\\t\\t_lender,\\r\\n\\t\\t\\t_loanContract.interest,\\r\\n\\t\\t\\texpiry,\\r\\n\\t\\t\\tblock.number\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction closeContract(bytes32 _id) external nonReentrant canBeClosed(_id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\t_clearBids(_loanContract, _id);\\r\\n\\t\\t_closeContract(_id, _loanContract);\\r\\n\\t\\temit ContractClosed(_id);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _closeContract(\\r\\n\\t\\tbytes32 _id,\\r\\n\\t\\tLoanContract storage _loanContract\\r\\n\\t) private {\\r\\n\\t\\tbytes32 _lockId = _loanContract.lockId;\\r\\n\\t\\tdelete borrowContract[_id];\\r\\n\\t\\tuserLoanIds[_msgSender()].remove(_id);\\r\\n\\t\\tTokenLocker.withdraw(_lockId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction repayLoan(bytes32 _id) external nonReentrant canBeRepaid(_id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tuint interest = _getInterest(_loanContract);\\r\\n\\t\\tuint amountBorrowed = _loanContract.amount;\\r\\n\\t\\tuint total = interest + amountBorrowed;\\r\\n\\t\\tWETH.safeTransferFrom(_msgSender(), address(this), total);\\r\\n\\t\\tuint _securityFee = (amountBorrowed * securityFee) / aprDivider;\\r\\n\\t\\tuint repayableInterest = _updateRevenue(\\r\\n\\t\\t\\t_loanContract.collection,\\r\\n\\t\\t\\tinterest,\\r\\n\\t\\t\\tprotocolFee\\r\\n\\t\\t);\\r\\n\\t\\tuint repayableAmount = total - repayableInterest;\\r\\n\\t\\tWETH.safeTransfer(_loanContract.lender, repayableAmount);\\r\\n\\t\\tWETH.safeTransfer(_msgSender(), _securityFee);\\r\\n\\t\\t_closeContract(_id, _loanContract);\\r\\n\\t\\temit LoanRepaid(_id, interest);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _updateRevenue(\\r\\n\\t\\taddress _collection,\\r\\n\\t\\tuint _amount,\\r\\n\\t\\tuint _lendingFee\\r\\n\\t) private returns (uint) {\\r\\n\\t\\t(uint256 amount, uint256 ProtocolFee, uint256 collectionFee) = Protocol\\r\\n\\t\\t\\t.calculateFee(_collection, _amount, _lendingFee);\\r\\n\\t\\tuint256 totalFees = ProtocolFee + collectionFee;\\r\\n\\t\\tWETH.safeTransfer(address(Protocol), totalFees);\\r\\n\\t\\tProtocol.updateRevenue(ProtocolFee, collectionFee, _collection);\\r\\n\\t\\treturn amount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction liquidate(bytes32 _id) external nonReentrant canBeLiquidated(_id) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\tuint _securityFee = (_loanContract.amount * securityFee) / aprDivider;\\r\\n\\t\\tuint liquidationRefund = _updateRevenue(\\r\\n\\t\\t\\t_loanContract.collection,\\r\\n\\t\\t\\t_securityFee,\\r\\n\\t\\t\\tprotocolFee\\r\\n\\t\\t);\\r\\n\\t\\tbytes32 _lockId = _loanContract.lockId;\\r\\n\\t\\tuserLoanIds[_loanContract.borrower].remove(_id);\\r\\n\\t\\tdelete borrowContract[_id];\\r\\n\\t\\tTokenLocker.liquidate(_lockId, _msgSender());\\r\\n\\t\\tWETH.safeTransfer(_msgSender(), liquidationRefund);\\r\\n\\t\\temit Liquidate(_id);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawLostBids() external nonReentrant {\\r\\n\\t\\tUserBids storage _userBids = bids[_msgSender()];\\r\\n\\t\\tuint lostBidsValue = _userBids.withdrawableBids;\\r\\n\\t\\trequire(lostBidsValue > 0);\\r\\n\\t\\t_userBids.withdrawableBids = 0;\\r\\n\\t\\tWETH.safeTransfer(_msgSender(), lostBidsValue);\\r\\n\\t}\\r\\n\\r\\n\\t//Read functions\\r\\n\\tfunction getInterest(bytes32 _id) external view returns (uint) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\treturn _getInterest(_loanContract);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLoanData(\\r\\n\\t\\tbytes32 _id\\r\\n\\t) external view returns (address, address, uint, uint, uint, bytes32) {\\r\\n\\t\\tLoanContract storage _loanContract = borrowContract[_id];\\r\\n\\t\\taddress _borrower = _loanContract.borrower;\\r\\n\\t\\taddress _lender = _loanContract.lender;\\r\\n\\t\\tuint _interest = _loanContract.interest;\\r\\n\\t\\tuint _amount = _loanContract.amount;\\r\\n\\t\\tuint _expiry = _loanContract.expiry;\\r\\n\\t\\tbytes32 _lockId = _loanContract.lockId;\\r\\n\\t\\treturn (_borrower, _lender, _interest, _amount, _expiry, _lockId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLostBidsValue(address _bidder) external view returns (uint) {\\r\\n\\t\\tuint lostBidsValue = bids[_bidder].withdrawableBids;\\r\\n\\t\\treturn lostBidsValue;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserActiveLoanIds(\\r\\n\\t\\taddress _borrower\\r\\n\\t) external view returns (bytes32[] memory ids) {\\r\\n\\t\\tuint length = userLoanIds[_borrower].length();\\r\\n\\t\\tids = new bytes32[](length);\\r\\n\\t\\tfor (uint i; i < length; ) {\\r\\n\\t\\t\\tids[i] = userLoanIds[_borrower].at(i);\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserLoanIds(\\r\\n\\t\\taddress _borrower\\r\\n\\t) external view returns (bytes32[] memory) {\\r\\n\\t\\treturn userLoanIds[_borrower].values();\\r\\n\\t}\\r\\n\\r\\n\\t\\r\\n\\tfunction getAdmin() external view returns (address) {\\r\\n\\t\\treturn admin;\\r\\n\\t}\\r\\n\\r\\n\\t//Admin functions\\r\\n\\tfunction updateFee(\\r\\n\\t\\tuint16 _securityFee,\\r\\n\\t\\tuint16 _protocolFee\\r\\n\\t) external isAdmin {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_securityFee >= 1 && _securityFee <= 10,\\r\\n\\t\\t\\t\\\"security fee params are out of bound\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_protocolFee >= 1 && _protocolFee <= 30,\\r\\n\\t\\t\\t\\\"protocol fee params are out of bound\\\"\\r\\n\\t\\t);\\r\\n\\t\\tsecurityFee = _securityFee;\\r\\n\\t\\tprotocolFee = _protocolFee;\\r\\n\\t\\temit UpdateProtocolFees(_securityFee, _protocolFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateInterestAndMinBorrowAmount(\\r\\n\\t\\tuint16 _minInterest,\\r\\n\\t\\tuint _minBorrowAmount\\r\\n\\t) external isAdmin {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_minInterest >= 1 && _minInterest <= aprDivider,\\r\\n\\t\\t\\t\\\"minimum interest params are out of bounds\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(_minBorrowAmount >= 1 gwei, \\\"minimum borrow is not in bounds\\\");\\r\\n\\t\\tminInterest = _minInterest;\\r\\n\\t\\tminBorrowAmount = _minBorrowAmount;\\r\\n\\t\\temit UpdateProtocolBorrowParameters(_minInterest, _minBorrowAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateExpiryDays(uint8 _min, uint8 _max) external isAdmin {\\r\\n\\t\\trequire(_min >= 7 && _max < 255, \\\"params are out of bounds\\\");\\r\\n\\t\\tminExpiryDay = _min;\\r\\n\\t\\tmaxExpiryDay = _max;\\r\\n\\t\\temit UpdateProtocolDateParameters(_min, _max);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateAdmin(address _admin) external isAdmin {\\r\\n\\t\\trequire(_admin != address(0), \\\"Address 0 not allowed\\\");\\r\\n\\t\\tadmin = _admin;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateTokenLocker(address _TokenLocker) external isAdmin {\\r\\n\\t\\trequire(_TokenLocker != address(0), \\\"Address 0 not allowed\\\");\\r\\n\\t\\tTokenLocker = ITokenLocker(_TokenLocker);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateProtocol(address _Protocol) external isAdmin {\\r\\n\\t\\trequire(_Protocol != address(0), \\\"Address 0 not allowed\\\");\\r\\n\\t\\tProtocol = IProtocol(_Protocol);\\r\\n\\t}\\r\\n\\r\\n\\tfunction recoverToken(address _token) external whenPaused isAdmin {\\r\\n\\t\\trequire(_token != address(WETH), \\\"WETH cannot be recovered\\\");\\r\\n\\t\\tif (_token == address(0)) {\\r\\n\\t\\t\\tuint etherBalance = address(this).balance;\\r\\n\\t\\t\\trequire(etherBalance > 0, \\\"Ether balance is 0\\\");\\r\\n\\t\\t\\t(bool sent, ) = admin.call{ value: etherBalance }(\\\"\\\");\\r\\n\\t\\t\\trequire(sent, \\\"Failed to send Ether\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tIERC20 token = IERC20(_token);\\r\\n\\t\\t\\tuint balanceOf = token.balanceOf(address(this));\\r\\n\\t\\t\\ttoken.safeTransfer(_msgSender(), balanceOf);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction pause() external whenNotPaused isAdmin {\\r\\n\\t\\t_pause();\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause() external whenPaused isAdmin {\\r\\n\\t\\t_unpause();\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// When a user bid is accepted, in the subgraph, account for it by checking if a userBid schema is active for that specific address\\r\\n\",\"keccak256\":\"0x8a8914efaeb10b3e8b998fd5526af190199a07d5f52c66e2bd4d4ed22c2a38e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260028054650b40e07d001960a31b65ffffffffffff60a01b1990911617905567016345785d8a00006003556004805461ffff191660641790553480156200004a57600080fd5b5060405162002f6f38038062002f6f8339810160408190526200006d9162000106565b6001600081905580546001600160a81b0319166101006001600160a01b038681169190910291909117909155600280546001600160a01b0319168383161790558216608052620000ba3390565b600460026101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505062000150565b80516001600160a01b03811681146200010157600080fd5b919050565b6000806000606084860312156200011c57600080fd5b6200012784620000e9565b92506200013760208501620000e9565b91506200014760408501620000e9565b90509250925092565b608051612daf620001c0600039600081816107b801528181610872015281816109e401528181610de601528181610e9101528181610ebf01528181610f77015281816110ff015281816112e50152818161153f015281816119a101528181611d1c015261218b0152612daf6000f3fe60806040526004361061019c5760003560e01c80636e9960c3116100ec578063c4d2b1b31161008a578063dfcc8dcf11610064578063dfcc8dcf1461051f578063e2f273bd1461053f578063ee6831511461055f578063f9e67abe1461057f57600080fd5b8063c4d2b1b31461043f578063d9e83bf0146104df578063df7cec28146104ff57600080fd5b80637d1d04b0116100c65780637d1d04b0146103a35780638456cb59146103ea5780639be65a60146103ff5780639e70c91a1461041f57600080fd5b80636e9960c31461032c57806371468afd14610363578063727a573c1461038357600080fd5b80633f84210f1161015957806354b939121161013357806354b93912146102b65780635c975abb146102c957806361e5a71e146102ec57806368f6baa41461030c57600080fd5b80633f84210f1461026157806341e517e41461028157806351e03b051461029657600080fd5b80630a71096e146101a15780630d2d04b4146101c357806317fd56ba146101d6578063260baf5d1461020c578063283ad8ab1461022c5780633f4ba83a1461024c575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612951565b61059f565b005b6101c16101d1366004612981565b61081d565b3480156101e257600080fd5b506101f66101f13660046129c2565b610905565b60405161020391906129dd565b60405180910390f35b34801561021857600080fd5b506101c1610227366004612951565b61092f565b34801561023857600080fd5b506101c1610247366004612a32565b610a2f565b34801561025857600080fd5b506101c1610cf1565b34801561026d57600080fd5b506101c161027c366004612951565b610d2a565b34801561028d57600080fd5b506101c1610f45565b3480156102a257600080fd5b506101c16102b1366004612ae2565b610fb2565b6101c16102c4366004612951565b611047565b3480156102d557600080fd5b5060015460ff166040519015158152602001610203565b3480156102f857600080fd5b506101c1610307366004612afe565b611198565b34801561031857600080fd5b506101c1610327366004612981565b611294565b34801561033857600080fd5b506004546201000090046001600160a01b03166040516001600160a01b039091168152602001610203565b34801561036f57600080fd5b506101c161037e366004612981565b611325565b34801561038f57600080fd5b506101c161039e3660046129c2565b611468565b3480156103af57600080fd5b506103dc6103be3660046129c2565b6001600160a01b031660009081526006602052604090206001015490565b604051908152602001610203565b3480156103f657600080fd5b506101c16114d7565b34801561040b57600080fd5b506101c161041a3660046129c2565b61150e565b34801561042b57600080fd5b506101c161043a3660046129c2565b611737565b34801561044b57600080fd5b506104a761045a366004612951565b6000908152600560205260409020805460018201546002830154600384015460048501546009909501546001600160a01b03948516969490931694600160a01b90920461ffff1693909290565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c001610203565b3480156104eb57600080fd5b506101c16104fa366004612b31565b6117ac565b34801561050b57600080fd5b506101c161051a366004612951565b611925565b34801561052b57600080fd5b506101c161053a366004612951565b611a07565b34801561054b57600080fd5b506101c161055a3660046129c2565b611ac0565b34801561056b57600080fd5b506103dc61057a366004612951565b611b37565b34801561058b57600080fd5b506101f661059a3660046129c2565b611b55565b6105a7611c1a565b600081815260056020526040902060018101548291906001600160a01b031633146105f857335b60405163472511eb60e11b81526001600160a01b0390911660048201526024015b60405180910390fd5b806004015442101561062057604051639dd8e45560e01b8152600481018390526024016105ef565b600083815260056020526040812060025460038201549192916127109161065391600160a01b90910461ffff1690612b71565b61065d9190612b88565b600283810154905491925060009161068b916001600160a01b0316908490600160b01b900461ffff16611c73565b600984015484546001600160a01b03166000908152600760205260409020919250906106b79088611dbe565b506000878152600560208190526040822080546001600160a01b0319908116825560018201805490911690556002810180546001600160b01b03191690556003810183905560048101839055908101829055906007820181818161071b828261291f565b5050600060099490940193909355505060015461010090046001600160a01b0316905063771b51d282336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561078c57600080fd5b505af11580156107a0573d6000803e3d6000fd5b505050506107df6107ae3390565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084611dca565b60405187907f49402ac80e80185fec1d9f8b8360275213386717f39afd886549219d1f0c17d390600090a250505050505061081a6001600055565b50565b610825611e2d565b61082d611c1a565b6000818152600560209081526040808320338452600681019092528220546003820154919261ffff90911691908290036108e9578034101561086e57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b5050505050505b6108f4858585611e73565b5050506109016001600055565b5050565b6001600160a01b038116600090815260076020526040902060609061092990611fd0565b92915050565b610937611e2d565b61093f611c1a565b600081815260056020526040902080548291906001600160a01b031661097b5760405163304e04d560e21b8152600481018390526024016105ef565b60018101546001600160a01b0316156109aa57604051639dd8e45560e01b8152600481018390526024016105ef565b8054336001600160a01b03909116036109c357336105ce565b6000838152600560205260409020610a0d3360038301546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691903090611fdd565b610a17818561201b565b610a228482336120f3565b50505061081a6001600055565b610a37611e2d565b610a3f611c1a565b828282600354831015610a5157600080fd5b60025460ff600160c01b9091048116908316108015610a7f575060025460ff600160c81b9091048116908316115b15610aa25760405163c75f14d960e01b815260ff831660048201526024016105ef565b60045461ffff908116908216108015610ac0575061271061ffff8216115b15610ae4576040516331d1010560e01b815261ffff821660048201526024016105ef565b600154604051636af5ccbd60e01b815260009161010090046001600160a01b031690636af5ccbd90610b22908d908d908d9087903390600401612baa565b6020604051808303816000875af1158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b659190612c06565b9050600033604080516001600160a01b039283166020820152918d16908201526060810189905260ff8816608082015261ffff871660a08201524260c082015260e00160408051808303601f19018152918152815160209283012060008181526005909352912090915060ff8816338260000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550878260020160146101000a81548161ffff021916908361ffff1602179055508982600301819055508082600401819055508382600901819055508c8260020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610c8d8360076000610c6e3390565b6001600160a01b0316815260208101919091526040016000209061221a565b50604080518b815261ffff8a16602082015280820183905290518591339186917f43713658fa9d1ddcca12df9a9a1761502a130cfcfb8fa28e636a9b925d7b788e919081900360600190a450505050505050610ce96001600055565b505050505050565b610cf9612226565b6004546201000090046001600160a01b0316336001600160a01b031614610d2057336105ce565b610d2861226f565b565b610d32611c1a565b600081815260056020526040902080548291906001600160a01b0316610d6e5760405163304e04d560e21b8152600481018390526024016105ef565b80546001600160a01b03163314610d8557336105ce565b60018101546001600160a01b0316610db357604051637566075b60e01b8152600481018390526024016105ef565b600083815260056020526040812090610dcb826122c1565b60038301549091506000610ddf8284612c1f565b9050610e167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316333084611fdd565b60025460009061271090610e3590600160a01b900461ffff1685612b71565b610e3f9190612b88565b6002868101549054919250600091610e6d916001600160a01b0316908790600160b01b900461ffff16611c73565b90506000610e7b8285612c32565b6001880154909150610eba906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611dca565b610eee7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163385611dca565b610ef88a88612349565b897f1d7f9b884cc43b9a5c67bd7c6f6fb5ddb8cb3eb3994e934e8448d7bf4a4a25c987604051610f2a91815260200190565b60405180910390a250505050505050505061081a6001600055565b610f4d611c1a565b336000908152600660205260409020600181015480610f6b57600080fd5b60006001830155610fa67f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163383611dca565b5050610d286001600055565b610fba611c1a565b6000818152600560205260409020610fd56007820184612455565b610fde57600080fd5b6001600160a01b038316600090815260068201602052604090205460028201805461ffff60a01b191661ffff909216600160a01b029190911790556110266007820184612477565b50611031818361201b565b61103c8282856120f3565b506109016001600055565b61104f611e2d565b611057611c1a565b600081815260056020526040902080548291906001600160a01b03166110935760405163304e04d560e21b8152600481018390526024016105ef565b60018101546001600160a01b0316156110c257604051639dd8e45560e01b8152600481018390526024016105ef565b8054336001600160a01b03909116036110db57336105ce565b60008381526005602052604090206003810154348111156110fb57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561115b57600080fd5b505af115801561116f573d6000803e3d6000fd5b505050505061117e838761201b565b6111898684336120f3565b505050505061081a6001600055565b6004546201000090046001600160a01b0316336001600160a01b0316146111bf57336105ce565b60078260ff16101580156111d6575060ff8160ff16105b6112225760405162461bcd60e51b815260206004820152601860248201527f706172616d7320617265206f7574206f6620626f756e6473000000000000000060448201526064016105ef565b6002805461ffff60c01b1916600160c01b60ff85811691820260ff60c81b191692909217600160c81b928516928302179092556040805192835260208301919091527f645889cf9ec240107adc65fb590a26518a06858b148e1439d94e781d2ce7549a91015b60405180910390a15050565b61129c611e2d565b6112a4611c1a565b600081815260056020908152604080832033845260068101909252822054909161ffff9091169081900361130e5761130e3360038401546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691903090611fdd565b611319848484611e73565b50506109016001600055565b6004546201000090046001600160a01b0316336001600160a01b03161461134c57336105ce565b60018261ffff1610158015611367575061271061ffff831611155b6113c55760405162461bcd60e51b815260206004820152602960248201527f6d696e696d756d20696e74657265737420706172616d7320617265206f7574206044820152686f6620626f756e647360b81b60648201526084016105ef565b633b9aca008110156114195760405162461bcd60e51b815260206004820152601f60248201527f6d696e696d756d20626f72726f77206973206e6f7420696e20626f756e64730060448201526064016105ef565b6004805461ffff191661ffff8416908117909155600382905560408051918252602082018390527fd7e780227e472d3fe651a4d98e9656a02629e2728863be525ef4c4bb01e3fb989101611288565b6004546201000090046001600160a01b0316336001600160a01b03161461148f57336105ce565b6001600160a01b0381166114b55760405162461bcd60e51b81526004016105ef90612c45565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6114df611e2d565b6004546201000090046001600160a01b0316336001600160a01b03161461150657336105ce565b610d2861248c565b611516612226565b6004546201000090046001600160a01b0316336001600160a01b03161461153d57336105ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036115be5760405162461bcd60e51b815260206004820152601860248201527f574554482063616e6e6f74206265207265636f7665726564000000000000000060448201526064016105ef565b6001600160a01b0381166116b457478061160f5760405162461bcd60e51b8152602060048201526012602482015271045746865722062616c616e636520697320360741b60448201526064016105ef565b6004546040516000916201000090046001600160a01b03169083908381818185875af1925050503d8060008114611662576040519150601f19603f3d011682016040523d82523d6000602084013e611667565b606091505b50509050806116af5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016105ef565b505050565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190612c06565b90506116af6001600160a01b0383163383611dca565b6004546201000090046001600160a01b0316336001600160a01b03161461175e57336105ce565b6001600160a01b0381166117845760405162461bcd60e51b81526004016105ef90612c45565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6004546201000090046001600160a01b0316336001600160a01b0316146117d357336105ce565b60018261ffff16101580156117ed5750600a8261ffff1611155b6118455760405162461bcd60e51b8152602060048201526024808201527f73656375726974792066656520706172616d7320617265206f7574206f6620626044820152631bdd5b9960e21b60648201526084016105ef565b60018161ffff161015801561185f5750601e8161ffff1611155b6118b75760405162461bcd60e51b8152602060048201526024808201527f70726f746f636f6c2066656520706172616d7320617265206f7574206f6620626044820152631bdd5b9960e21b60648201526084016105ef565b6002805463ffffffff60a01b1916600160a01b61ffff85811691820261ffff60b01b191692909217600160b01b928516928302179092556040805192835260208301919091527fb95244055bdde969966c5fd58cb55549494f08b12a04cd76f7276e9548e6c7219101611288565b61192d611c1a565b60008181526005602052604090206119486007820133612455565b61195157600080fd5b61195e6007820133612477565b50336000818152600683810160209081526040808420805461ffff199081169091559282528084208785529091529091208054909116905560038201546119cf917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691611dca565b604051339083907f86f86fc36b92095f40b93e930ed6b075c937c205ab08975a4594fc10eee7894290600090a35061081a6001600055565b611a0f611c1a565b600081815260056020526040902080548291906001600160a01b03163314611a3757336105ce565b60018101546001600160a01b031615611a6657604051639dd8e45560e01b8152600481018390526024016105ef565b6000838152600560205260409020611a7e818561201b565b611a888482612349565b60405184907f5519c9d789b31e2b6ac156a708c778b5b60f87b39472810962132384e982783890600090a250505061081a6001600055565b6004546201000090046001600160a01b0316336001600160a01b031614611ae757336105ce565b6001600160a01b038116611b0d5760405162461bcd60e51b81526004016105ef90612c45565b600480546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6000818152600560205260408120611b4e816122c1565b9392505050565b6001600160a01b038116600090815260076020526040812060609190611b7a906124c7565b90508067ffffffffffffffff811115611b9557611b95612c74565b604051908082528060200260200182016040528015611bbe578160200160208202803683370190505b50915060005b81811015611c13576001600160a01b0384166000908152600760205260409020611bee90826124d1565b838281518110611c0057611c00612c8a565b6020908102919091010152600101611bc4565b5050919050565b600260005403611c6c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ef565b6002600055565b60025460405162c93be760e21b81526001600160a01b03858116600483015260248201859052604482018490526000928392839283921690630324ef9c90606401606060405180830381865afa158015611cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf59190612ca0565b919450925090506000611d088284612c1f565b600254909150611d45906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611dca565b60025460405163079fce6960e11b815260048101859052602481018490526001600160a01b038a8116604483015290911690630f3f9cd290606401600060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b50959a9950505050505050505050565b6000611b4e83836124dd565b6040516001600160a01b0383166024820152604481018290526116af90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125d0565b60015460ff1615610d285760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ef565b60008281526005602052604090208054849184916001600160a01b0316611eb05760405163304e04d560e21b8152600481018390526024016105ef565b8054336001600160a01b0390911603611ec957336105ce565b60018101546001600160a01b031615611ef857604051639dd8e45560e01b8152600481018390526024016105ef565b60045461ffff908116908416108015611f16575061271061ffff8416115b15611f3a576040516331d1010560e01b815261ffff841660048201526024016105ef565b3360008181526006860160205260409020805461ffff191661ffff8916179055611f689060078601906126a5565b50336000818152600660209081526040808320898452825291829020805461ffff191661ffff8b16908117909155915191825287917f3e840c20c4b506b78335be90a9d95804cb950d4cce5c38eb8ef9edbd2b3bd5ff910160405180910390a3505050505050565b60606000611b4e836126ba565b6040516001600160a01b03808516602483015283166044820152606481018290526120159085906323b872dd60e01b90608401611df6565b50505050565b6000612029836007016124c7565b600384015490915060005b828110156120ec57600061204b60078701826124d1565b905061205a6007870182612477565b506001600160a01b0381166000908152600660209081526040808320888452918290528220805461ffff191690556001810180549192869261209d908490612c1f565b90915550506040518481526001600160a01b0383169087907fe6343e4ad2f1055c053530d62efb367f443af7dc1b3a9bb8a93cb9a1588ca9289060200160405180910390a35050600101612034565b5050505050565b6003820154600483015460009061210d9062015180612b71565b6121179042612c1f565b6002549091506000906127109061213990600160a01b900461ffff1685612b71565b6121439190612b88565b905060006121518285612c32565b600487018490554360058801556001870180546001600160a01b0319166001600160a01b038881169190911790915587549192506121b4917f00000000000000000000000000000000000000000000000000000000000000008216911683611dca565b600286015460408051600160a01b90920461ffff1682526020820185905243908201526001600160a01b0386169088907fbbea1249a387710cef1b9b770230af5aec248504ea9855ad53a36dbcbc0c48f99060600160405180910390a350505050505050565b6000611b4e8383612716565b60015460ff16610d285760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ef565b612277612226565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600181015460009081906001600160a01b03166122de5792915050565b60038301546002840154600091612710916123049190600160a01b900461ffff16612b71565b61230e9190612b88565b9050600061231f62a0668083612b88565b905060008560050154436123339190612c32565b905061233f8183612b71565b9695505050505050565b60098101546000838152600560208190526040822080546001600160a01b0319908116825560018201805490911690556002810180546001600160b01b0319169055600381018390556004810183905590810182905590600782018181816123b1828261291f565b50505050600982016000905550506123ed83600760006123ce3390565b6001600160a01b03168152602081019190915260400160002090611dbe565b5060015460405163470cc4cf60e11b8152600481018390526101009091046001600160a01b031690638e19899e90602401600060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b50505050505050565b6001600160a01b03811660009081526001830160205260408120541515611b4e565b6000611b4e836001600160a01b0384166124dd565b612494611e2d565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336122a4565b6000610929825490565b6000611b4e8383612765565b600081815260018301602052604081205480156125c6576000612501600183612c32565b855490915060009061251590600190612c32565b905081811461257a57600086600001828154811061253557612535612c8a565b906000526020600020015490508087600001848154811061255857612558612c8a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061258b5761258b612cce565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610929565b6000915050610929565b6000612625826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661278f9092919063ffffffff16565b90508051600014806126465750808060200190518101906126469190612ce4565b6116af5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ef565b6000611b4e836001600160a01b038416612716565b60608160000180548060200260200160405190810160405280929190818152602001828054801561270a57602002820191906000526020600020905b8154815260200190600101908083116126f6575b50505050509050919050565b600081815260018301602052604081205461275d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610929565b506000610929565b600082600001828154811061277c5761277c612c8a565b9060005260206000200154905092915050565b606061279e84846000856127a6565b949350505050565b6060824710156128075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ef565b600080866001600160a01b031685876040516128239190612d2a565b60006040518083038185875af1925050503d8060008114612860576040519150601f19603f3d011682016040523d82523d6000602084013e612865565b606091505b509150915061287687838387612881565b979650505050505050565b606083156128f05782516000036128e9576001600160a01b0385163b6128e95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ef565b508161279e565b61279e83838151156129055781518083602001fd5b8060405162461bcd60e51b81526004016105ef9190612d46565b508054600082559060005260206000209081019061081a91905b8082111561294d5760008155600101612939565b5090565b60006020828403121561296357600080fd5b5035919050565b803561ffff8116811461297c57600080fd5b919050565b6000806040838503121561299457600080fd5b61299d8361296a565b946020939093013593505050565b80356001600160a01b038116811461297c57600080fd5b6000602082840312156129d457600080fd5b611b4e826129ab565b6020808252825182820181905260009190848201906040850190845b81811015612a15578351835292840192918401916001016129f9565b50909695505050505050565b803560ff8116811461297c57600080fd5b60008060008060008060a08789031215612a4b57600080fd5b612a54876129ab565b9550602087013567ffffffffffffffff80821115612a7157600080fd5b818901915089601f830112612a8557600080fd5b813581811115612a9457600080fd5b8a60208260051b8501011115612aa957600080fd5b60208301975080965050505060408701359250612ac860608801612a21565b9150612ad66080880161296a565b90509295509295509295565b60008060408385031215612af557600080fd5b61299d836129ab565b60008060408385031215612b1157600080fd5b612b1a83612a21565b9150612b2860208401612a21565b90509250929050565b60008060408385031215612b4457600080fd5b612b4d8361296a565b9150612b286020840161296a565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761092957610929612b5b565b600082612ba557634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03868116825260806020830181905282018590526000906001600160fb1b03861115612bdc57600080fd5b8560051b808860a0860137604084019590955292909216606082015290910160a001949350505050565b600060208284031215612c1857600080fd5b5051919050565b8082018082111561092957610929612b5b565b8181038181111561092957610929612b5b565b6020808252601590820152741059191c995cdcc80c081b9bdd08185b1b1bddd959605a1b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600080600060608486031215612cb557600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612cf657600080fd5b81518015158114611b4e57600080fd5b60005b83811015612d21578181015183820152602001612d09565b50506000910152565b60008251612d3c818460208701612d06565b9190910192915050565b6020815260008251806020840152612d65816040850160208701612d06565b601f01601f1916919091016040019291505056fea2646970667358221220db51f3d82b72b65bae4fd237e697286740f67532ce59fe6e9ed6bc0f52c56f4864736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80636e9960c3116100ec578063c4d2b1b31161008a578063dfcc8dcf11610064578063dfcc8dcf1461051f578063e2f273bd1461053f578063ee6831511461055f578063f9e67abe1461057f57600080fd5b8063c4d2b1b31461043f578063d9e83bf0146104df578063df7cec28146104ff57600080fd5b80637d1d04b0116100c65780637d1d04b0146103a35780638456cb59146103ea5780639be65a60146103ff5780639e70c91a1461041f57600080fd5b80636e9960c31461032c57806371468afd14610363578063727a573c1461038357600080fd5b80633f84210f1161015957806354b939121161013357806354b93912146102b65780635c975abb146102c957806361e5a71e146102ec57806368f6baa41461030c57600080fd5b80633f84210f1461026157806341e517e41461028157806351e03b051461029657600080fd5b80630a71096e146101a15780630d2d04b4146101c357806317fd56ba146101d6578063260baf5d1461020c578063283ad8ab1461022c5780633f4ba83a1461024c575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612951565b61059f565b005b6101c16101d1366004612981565b61081d565b3480156101e257600080fd5b506101f66101f13660046129c2565b610905565b60405161020391906129dd565b60405180910390f35b34801561021857600080fd5b506101c1610227366004612951565b61092f565b34801561023857600080fd5b506101c1610247366004612a32565b610a2f565b34801561025857600080fd5b506101c1610cf1565b34801561026d57600080fd5b506101c161027c366004612951565b610d2a565b34801561028d57600080fd5b506101c1610f45565b3480156102a257600080fd5b506101c16102b1366004612ae2565b610fb2565b6101c16102c4366004612951565b611047565b3480156102d557600080fd5b5060015460ff166040519015158152602001610203565b3480156102f857600080fd5b506101c1610307366004612afe565b611198565b34801561031857600080fd5b506101c1610327366004612981565b611294565b34801561033857600080fd5b506004546201000090046001600160a01b03166040516001600160a01b039091168152602001610203565b34801561036f57600080fd5b506101c161037e366004612981565b611325565b34801561038f57600080fd5b506101c161039e3660046129c2565b611468565b3480156103af57600080fd5b506103dc6103be3660046129c2565b6001600160a01b031660009081526006602052604090206001015490565b604051908152602001610203565b3480156103f657600080fd5b506101c16114d7565b34801561040b57600080fd5b506101c161041a3660046129c2565b61150e565b34801561042b57600080fd5b506101c161043a3660046129c2565b611737565b34801561044b57600080fd5b506104a761045a366004612951565b6000908152600560205260409020805460018201546002830154600384015460048501546009909501546001600160a01b03948516969490931694600160a01b90920461ffff1693909290565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c001610203565b3480156104eb57600080fd5b506101c16104fa366004612b31565b6117ac565b34801561050b57600080fd5b506101c161051a366004612951565b611925565b34801561052b57600080fd5b506101c161053a366004612951565b611a07565b34801561054b57600080fd5b506101c161055a3660046129c2565b611ac0565b34801561056b57600080fd5b506103dc61057a366004612951565b611b37565b34801561058b57600080fd5b506101f661059a3660046129c2565b611b55565b6105a7611c1a565b600081815260056020526040902060018101548291906001600160a01b031633146105f857335b60405163472511eb60e11b81526001600160a01b0390911660048201526024015b60405180910390fd5b806004015442101561062057604051639dd8e45560e01b8152600481018390526024016105ef565b600083815260056020526040812060025460038201549192916127109161065391600160a01b90910461ffff1690612b71565b61065d9190612b88565b600283810154905491925060009161068b916001600160a01b0316908490600160b01b900461ffff16611c73565b600984015484546001600160a01b03166000908152600760205260409020919250906106b79088611dbe565b506000878152600560208190526040822080546001600160a01b0319908116825560018201805490911690556002810180546001600160b01b03191690556003810183905560048101839055908101829055906007820181818161071b828261291f565b5050600060099490940193909355505060015461010090046001600160a01b0316905063771b51d282336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561078c57600080fd5b505af11580156107a0573d6000803e3d6000fd5b505050506107df6107ae3390565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084611dca565b60405187907f49402ac80e80185fec1d9f8b8360275213386717f39afd886549219d1f0c17d390600090a250505050505061081a6001600055565b50565b610825611e2d565b61082d611c1a565b6000818152600560209081526040808320338452600681019092528220546003820154919261ffff90911691908290036108e9578034101561086e57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b5050505050505b6108f4858585611e73565b5050506109016001600055565b5050565b6001600160a01b038116600090815260076020526040902060609061092990611fd0565b92915050565b610937611e2d565b61093f611c1a565b600081815260056020526040902080548291906001600160a01b031661097b5760405163304e04d560e21b8152600481018390526024016105ef565b60018101546001600160a01b0316156109aa57604051639dd8e45560e01b8152600481018390526024016105ef565b8054336001600160a01b03909116036109c357336105ce565b6000838152600560205260409020610a0d3360038301546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691903090611fdd565b610a17818561201b565b610a228482336120f3565b50505061081a6001600055565b610a37611e2d565b610a3f611c1a565b828282600354831015610a5157600080fd5b60025460ff600160c01b9091048116908316108015610a7f575060025460ff600160c81b9091048116908316115b15610aa25760405163c75f14d960e01b815260ff831660048201526024016105ef565b60045461ffff908116908216108015610ac0575061271061ffff8216115b15610ae4576040516331d1010560e01b815261ffff821660048201526024016105ef565b600154604051636af5ccbd60e01b815260009161010090046001600160a01b031690636af5ccbd90610b22908d908d908d9087903390600401612baa565b6020604051808303816000875af1158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b659190612c06565b9050600033604080516001600160a01b039283166020820152918d16908201526060810189905260ff8816608082015261ffff871660a08201524260c082015260e00160408051808303601f19018152918152815160209283012060008181526005909352912090915060ff8816338260000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550878260020160146101000a81548161ffff021916908361ffff1602179055508982600301819055508082600401819055508382600901819055508c8260020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610c8d8360076000610c6e3390565b6001600160a01b0316815260208101919091526040016000209061221a565b50604080518b815261ffff8a16602082015280820183905290518591339186917f43713658fa9d1ddcca12df9a9a1761502a130cfcfb8fa28e636a9b925d7b788e919081900360600190a450505050505050610ce96001600055565b505050505050565b610cf9612226565b6004546201000090046001600160a01b0316336001600160a01b031614610d2057336105ce565b610d2861226f565b565b610d32611c1a565b600081815260056020526040902080548291906001600160a01b0316610d6e5760405163304e04d560e21b8152600481018390526024016105ef565b80546001600160a01b03163314610d8557336105ce565b60018101546001600160a01b0316610db357604051637566075b60e01b8152600481018390526024016105ef565b600083815260056020526040812090610dcb826122c1565b60038301549091506000610ddf8284612c1f565b9050610e167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316333084611fdd565b60025460009061271090610e3590600160a01b900461ffff1685612b71565b610e3f9190612b88565b6002868101549054919250600091610e6d916001600160a01b0316908790600160b01b900461ffff16611c73565b90506000610e7b8285612c32565b6001880154909150610eba906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611dca565b610eee7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163385611dca565b610ef88a88612349565b897f1d7f9b884cc43b9a5c67bd7c6f6fb5ddb8cb3eb3994e934e8448d7bf4a4a25c987604051610f2a91815260200190565b60405180910390a250505050505050505061081a6001600055565b610f4d611c1a565b336000908152600660205260409020600181015480610f6b57600080fd5b60006001830155610fa67f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163383611dca565b5050610d286001600055565b610fba611c1a565b6000818152600560205260409020610fd56007820184612455565b610fde57600080fd5b6001600160a01b038316600090815260068201602052604090205460028201805461ffff60a01b191661ffff909216600160a01b029190911790556110266007820184612477565b50611031818361201b565b61103c8282856120f3565b506109016001600055565b61104f611e2d565b611057611c1a565b600081815260056020526040902080548291906001600160a01b03166110935760405163304e04d560e21b8152600481018390526024016105ef565b60018101546001600160a01b0316156110c257604051639dd8e45560e01b8152600481018390526024016105ef565b8054336001600160a01b03909116036110db57336105ce565b60008381526005602052604090206003810154348111156110fb57600080fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561115b57600080fd5b505af115801561116f573d6000803e3d6000fd5b505050505061117e838761201b565b6111898684336120f3565b505050505061081a6001600055565b6004546201000090046001600160a01b0316336001600160a01b0316146111bf57336105ce565b60078260ff16101580156111d6575060ff8160ff16105b6112225760405162461bcd60e51b815260206004820152601860248201527f706172616d7320617265206f7574206f6620626f756e6473000000000000000060448201526064016105ef565b6002805461ffff60c01b1916600160c01b60ff85811691820260ff60c81b191692909217600160c81b928516928302179092556040805192835260208301919091527f645889cf9ec240107adc65fb590a26518a06858b148e1439d94e781d2ce7549a91015b60405180910390a15050565b61129c611e2d565b6112a4611c1a565b600081815260056020908152604080832033845260068101909252822054909161ffff9091169081900361130e5761130e3360038401546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691903090611fdd565b611319848484611e73565b50506109016001600055565b6004546201000090046001600160a01b0316336001600160a01b03161461134c57336105ce565b60018261ffff1610158015611367575061271061ffff831611155b6113c55760405162461bcd60e51b815260206004820152602960248201527f6d696e696d756d20696e74657265737420706172616d7320617265206f7574206044820152686f6620626f756e647360b81b60648201526084016105ef565b633b9aca008110156114195760405162461bcd60e51b815260206004820152601f60248201527f6d696e696d756d20626f72726f77206973206e6f7420696e20626f756e64730060448201526064016105ef565b6004805461ffff191661ffff8416908117909155600382905560408051918252602082018390527fd7e780227e472d3fe651a4d98e9656a02629e2728863be525ef4c4bb01e3fb989101611288565b6004546201000090046001600160a01b0316336001600160a01b03161461148f57336105ce565b6001600160a01b0381166114b55760405162461bcd60e51b81526004016105ef90612c45565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6114df611e2d565b6004546201000090046001600160a01b0316336001600160a01b03161461150657336105ce565b610d2861248c565b611516612226565b6004546201000090046001600160a01b0316336001600160a01b03161461153d57336105ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036115be5760405162461bcd60e51b815260206004820152601860248201527f574554482063616e6e6f74206265207265636f7665726564000000000000000060448201526064016105ef565b6001600160a01b0381166116b457478061160f5760405162461bcd60e51b8152602060048201526012602482015271045746865722062616c616e636520697320360741b60448201526064016105ef565b6004546040516000916201000090046001600160a01b03169083908381818185875af1925050503d8060008114611662576040519150601f19603f3d011682016040523d82523d6000602084013e611667565b606091505b50509050806116af5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016105ef565b505050565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190612c06565b90506116af6001600160a01b0383163383611dca565b6004546201000090046001600160a01b0316336001600160a01b03161461175e57336105ce565b6001600160a01b0381166117845760405162461bcd60e51b81526004016105ef90612c45565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6004546201000090046001600160a01b0316336001600160a01b0316146117d357336105ce565b60018261ffff16101580156117ed5750600a8261ffff1611155b6118455760405162461bcd60e51b8152602060048201526024808201527f73656375726974792066656520706172616d7320617265206f7574206f6620626044820152631bdd5b9960e21b60648201526084016105ef565b60018161ffff161015801561185f5750601e8161ffff1611155b6118b75760405162461bcd60e51b8152602060048201526024808201527f70726f746f636f6c2066656520706172616d7320617265206f7574206f6620626044820152631bdd5b9960e21b60648201526084016105ef565b6002805463ffffffff60a01b1916600160a01b61ffff85811691820261ffff60b01b191692909217600160b01b928516928302179092556040805192835260208301919091527fb95244055bdde969966c5fd58cb55549494f08b12a04cd76f7276e9548e6c7219101611288565b61192d611c1a565b60008181526005602052604090206119486007820133612455565b61195157600080fd5b61195e6007820133612477565b50336000818152600683810160209081526040808420805461ffff199081169091559282528084208785529091529091208054909116905560038201546119cf917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691611dca565b604051339083907f86f86fc36b92095f40b93e930ed6b075c937c205ab08975a4594fc10eee7894290600090a35061081a6001600055565b611a0f611c1a565b600081815260056020526040902080548291906001600160a01b03163314611a3757336105ce565b60018101546001600160a01b031615611a6657604051639dd8e45560e01b8152600481018390526024016105ef565b6000838152600560205260409020611a7e818561201b565b611a888482612349565b60405184907f5519c9d789b31e2b6ac156a708c778b5b60f87b39472810962132384e982783890600090a250505061081a6001600055565b6004546201000090046001600160a01b0316336001600160a01b031614611ae757336105ce565b6001600160a01b038116611b0d5760405162461bcd60e51b81526004016105ef90612c45565b600480546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6000818152600560205260408120611b4e816122c1565b9392505050565b6001600160a01b038116600090815260076020526040812060609190611b7a906124c7565b90508067ffffffffffffffff811115611b9557611b95612c74565b604051908082528060200260200182016040528015611bbe578160200160208202803683370190505b50915060005b81811015611c13576001600160a01b0384166000908152600760205260409020611bee90826124d1565b838281518110611c0057611c00612c8a565b6020908102919091010152600101611bc4565b5050919050565b600260005403611c6c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ef565b6002600055565b60025460405162c93be760e21b81526001600160a01b03858116600483015260248201859052604482018490526000928392839283921690630324ef9c90606401606060405180830381865afa158015611cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf59190612ca0565b919450925090506000611d088284612c1f565b600254909150611d45906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611dca565b60025460405163079fce6960e11b815260048101859052602481018490526001600160a01b038a8116604483015290911690630f3f9cd290606401600060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b50959a9950505050505050505050565b6000611b4e83836124dd565b6040516001600160a01b0383166024820152604481018290526116af90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125d0565b60015460ff1615610d285760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ef565b60008281526005602052604090208054849184916001600160a01b0316611eb05760405163304e04d560e21b8152600481018390526024016105ef565b8054336001600160a01b0390911603611ec957336105ce565b60018101546001600160a01b031615611ef857604051639dd8e45560e01b8152600481018390526024016105ef565b60045461ffff908116908416108015611f16575061271061ffff8416115b15611f3a576040516331d1010560e01b815261ffff841660048201526024016105ef565b3360008181526006860160205260409020805461ffff191661ffff8916179055611f689060078601906126a5565b50336000818152600660209081526040808320898452825291829020805461ffff191661ffff8b16908117909155915191825287917f3e840c20c4b506b78335be90a9d95804cb950d4cce5c38eb8ef9edbd2b3bd5ff910160405180910390a3505050505050565b60606000611b4e836126ba565b6040516001600160a01b03808516602483015283166044820152606481018290526120159085906323b872dd60e01b90608401611df6565b50505050565b6000612029836007016124c7565b600384015490915060005b828110156120ec57600061204b60078701826124d1565b905061205a6007870182612477565b506001600160a01b0381166000908152600660209081526040808320888452918290528220805461ffff191690556001810180549192869261209d908490612c1f565b90915550506040518481526001600160a01b0383169087907fe6343e4ad2f1055c053530d62efb367f443af7dc1b3a9bb8a93cb9a1588ca9289060200160405180910390a35050600101612034565b5050505050565b6003820154600483015460009061210d9062015180612b71565b6121179042612c1f565b6002549091506000906127109061213990600160a01b900461ffff1685612b71565b6121439190612b88565b905060006121518285612c32565b600487018490554360058801556001870180546001600160a01b0319166001600160a01b038881169190911790915587549192506121b4917f00000000000000000000000000000000000000000000000000000000000000008216911683611dca565b600286015460408051600160a01b90920461ffff1682526020820185905243908201526001600160a01b0386169088907fbbea1249a387710cef1b9b770230af5aec248504ea9855ad53a36dbcbc0c48f99060600160405180910390a350505050505050565b6000611b4e8383612716565b60015460ff16610d285760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ef565b612277612226565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600181015460009081906001600160a01b03166122de5792915050565b60038301546002840154600091612710916123049190600160a01b900461ffff16612b71565b61230e9190612b88565b9050600061231f62a0668083612b88565b905060008560050154436123339190612c32565b905061233f8183612b71565b9695505050505050565b60098101546000838152600560208190526040822080546001600160a01b0319908116825560018201805490911690556002810180546001600160b01b0319169055600381018390556004810183905590810182905590600782018181816123b1828261291f565b50505050600982016000905550506123ed83600760006123ce3390565b6001600160a01b03168152602081019190915260400160002090611dbe565b5060015460405163470cc4cf60e11b8152600481018390526101009091046001600160a01b031690638e19899e90602401600060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b50505050505050565b6001600160a01b03811660009081526001830160205260408120541515611b4e565b6000611b4e836001600160a01b0384166124dd565b612494611e2d565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336122a4565b6000610929825490565b6000611b4e8383612765565b600081815260018301602052604081205480156125c6576000612501600183612c32565b855490915060009061251590600190612c32565b905081811461257a57600086600001828154811061253557612535612c8a565b906000526020600020015490508087600001848154811061255857612558612c8a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061258b5761258b612cce565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610929565b6000915050610929565b6000612625826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661278f9092919063ffffffff16565b90508051600014806126465750808060200190518101906126469190612ce4565b6116af5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ef565b6000611b4e836001600160a01b038416612716565b60608160000180548060200260200160405190810160405280929190818152602001828054801561270a57602002820191906000526020600020905b8154815260200190600101908083116126f6575b50505050509050919050565b600081815260018301602052604081205461275d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610929565b506000610929565b600082600001828154811061277c5761277c612c8a565b9060005260206000200154905092915050565b606061279e84846000856127a6565b949350505050565b6060824710156128075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105ef565b600080866001600160a01b031685876040516128239190612d2a565b60006040518083038185875af1925050503d8060008114612860576040519150601f19603f3d011682016040523d82523d6000602084013e612865565b606091505b509150915061287687838387612881565b979650505050505050565b606083156128f05782516000036128e9576001600160a01b0385163b6128e95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ef565b508161279e565b61279e83838151156129055781518083602001fd5b8060405162461bcd60e51b81526004016105ef9190612d46565b508054600082559060005260206000209081019061081a91905b8082111561294d5760008155600101612939565b5090565b60006020828403121561296357600080fd5b5035919050565b803561ffff8116811461297c57600080fd5b919050565b6000806040838503121561299457600080fd5b61299d8361296a565b946020939093013593505050565b80356001600160a01b038116811461297c57600080fd5b6000602082840312156129d457600080fd5b611b4e826129ab565b6020808252825182820181905260009190848201906040850190845b81811015612a15578351835292840192918401916001016129f9565b50909695505050505050565b803560ff8116811461297c57600080fd5b60008060008060008060a08789031215612a4b57600080fd5b612a54876129ab565b9550602087013567ffffffffffffffff80821115612a7157600080fd5b818901915089601f830112612a8557600080fd5b813581811115612a9457600080fd5b8a60208260051b8501011115612aa957600080fd5b60208301975080965050505060408701359250612ac860608801612a21565b9150612ad66080880161296a565b90509295509295509295565b60008060408385031215612af557600080fd5b61299d836129ab565b60008060408385031215612b1157600080fd5b612b1a83612a21565b9150612b2860208401612a21565b90509250929050565b60008060408385031215612b4457600080fd5b612b4d8361296a565b9150612b286020840161296a565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761092957610929612b5b565b600082612ba557634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03868116825260806020830181905282018590526000906001600160fb1b03861115612bdc57600080fd5b8560051b808860a0860137604084019590955292909216606082015290910160a001949350505050565b600060208284031215612c1857600080fd5b5051919050565b8082018082111561092957610929612b5b565b8181038181111561092957610929612b5b565b6020808252601590820152741059191c995cdcc80c081b9bdd08185b1b1bddd959605a1b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600080600060608486031215612cb557600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612cf657600080fd5b81518015158114611b4e57600080fd5b60005b83811015612d21578181015183820152602001612d09565b50506000910152565b60008251612d3c818460208701612d06565b9190910192915050565b6020815260008251806020840152612d65816040850160208701612d06565b601f01601f1916919091016040019291505056fea2646970667358221220db51f3d82b72b65bae4fd237e697286740f67532ce59fe6e9ed6bc0f52c56f4864736f6c63430008180033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 231,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2605,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "TokenLocker",
        "offset": 1,
        "slot": "1",
        "type": "t_contract(ITokenLocker)2562"
      },
      {
        "astId": 2611,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "Protocol",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IProtocol)2533"
      },
      {
        "astId": 2614,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "securityFee",
        "offset": 20,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 2617,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "protocolFee",
        "offset": 22,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 2620,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "minExpiryDay",
        "offset": 24,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2623,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "maxExpiryDay",
        "offset": 25,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 2626,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "minBorrowAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2632,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "minInterest",
        "offset": 0,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 2634,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "admin",
        "offset": 2,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2811,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "borrowContract",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(LoanContract)2799_storage)"
      },
      {
        "astId": 2816,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "bids",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UserBids)2806_storage)"
      },
      {
        "astId": 2821,
        "contract": "contracts/p2plending.sol:P2PLending",
        "label": "userLoanIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)2080_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IProtocol)2533": {
        "encoding": "inplace",
        "label": "contract IProtocol",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenLocker)2562": {
        "encoding": "inplace",
        "label": "contract ITokenLocker",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)2080_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)2080_storage"
      },
      "t_mapping(t_address,t_struct(UserBids)2806_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct P2PLending.UserBids)",
        "numberOfBytes": "32",
        "value": "t_struct(UserBids)2806_storage"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_bytes32,t_struct(LoanContract)2799_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct P2PLending.LoanContract)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanContract)2799_storage"
      },
      "t_mapping(t_bytes32,t_uint16)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2201_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2200,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1886_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)2080_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2079,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1886_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LoanContract)2799_storage": {
        "encoding": "inplace",
        "label": "struct P2PLending.LoanContract",
        "members": [
          {
            "astId": 2777,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2779,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "lender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2781,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "collection",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2783,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "interest",
            "offset": 20,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 2785,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2787,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "expiry",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2789,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "checkPointBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2793,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "bids",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint16)"
          },
          {
            "astId": 2796,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "bidders",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(AddressSet)2201_storage"
          },
          {
            "astId": 2798,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "lockId",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Set)1886_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1881,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1885,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserBids)2806_storage": {
        "encoding": "inplace",
        "label": "struct P2PLending.UserBids",
        "members": [
          {
            "astId": 2803,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "proposedInterest",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_uint16)"
          },
          {
            "astId": 2805,
            "contract": "contracts/p2plending.sol:P2PLending",
            "label": "withdrawableBids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}