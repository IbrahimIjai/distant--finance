{
  "address": "0x1f9d7C7c02405BD8CE2E40705F500078B098876a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolFee",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_revenueCollector",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFees",
          "type": "uint256"
        }
      ],
      "name": "CollectionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "CollectionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectionFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyFees",
          "type": "uint256"
        }
      ],
      "name": "CollectionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum DistantFinance.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfs",
          "type": "string"
        }
      ],
      "name": "CollectionVerificationStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "protocolFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "securityFee",
          "type": "uint16"
        }
      ],
      "name": "ProtocolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "ProtocolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RevenueWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "protocolFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyFees",
          "type": "uint256"
        }
      ],
      "name": "addCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "_protocolFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_securityFee",
          "type": "uint16"
        }
      ],
      "name": "addProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "getCollectionData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collectionAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyFees",
              "type": "uint256"
            },
            {
              "internalType": "enum DistantFinance.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct DistantFinance.Collection",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_supportedCollections",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isSupportedProtocol",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "removeCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "removeProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyFees",
          "type": "uint256"
        }
      ],
      "name": "updateCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updateProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectionFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "updateRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRevenueCollector",
          "type": "address"
        }
      ],
      "name": "updateRevenueCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newprotocolFee",
          "type": "uint16"
        }
      ],
      "name": "updateprotocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        }
      ],
      "name": "verifyCollectionStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c8dadfd107cede4b5278fb416c32af677720931bd8ce99acb22c2475b281604",
  "receipt": {
    "to": null,
    "from": "0xe726c27385c740A9C3B026891BA0e366B344E318",
    "contractAddress": "0x1f9d7C7c02405BD8CE2E40705F500078B098876a",
    "transactionIndex": 86,
    "gasUsed": "1822003",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000c00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000201000000000000000000000000000000000001020000000000000000000800000000000000000000000000040000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe07e2bf48b3b8a307d10ce4735180977c215386c762f848db955833276a84add",
    "transactionHash": "0x0c8dadfd107cede4b5278fb416c32af677720931bd8ce99acb22c2475b281604",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 20967399,
        "transactionHash": "0x0c8dadfd107cede4b5278fb416c32af677720931bd8ce99acb22c2475b281604",
        "address": "0x1f9d7C7c02405BD8CE2E40705F500078B098876a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e726c27385c740a9c3b026891ba0e366b344e318"
        ],
        "data": "0x",
        "logIndex": 215,
        "blockHash": "0xe07e2bf48b3b8a307d10ce4735180977c215386c762f848db955833276a84add"
      }
    ],
    "blockNumber": 20967399,
    "cumulativeGasUsed": "12165888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    300,
    "0xe726c27385c740A9C3B026891BA0e366B344E318",
    "0x4200000000000000000000000000000000000006",
    "0xe726c27385c740A9C3B026891BA0e366B344E318"
  ],
  "numDeployments": 1,
  "solcInputHash": "78e09356f312fb5ef81b6240452c656d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionFeeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFees\",\"type\":\"uint256\"}],\"name\":\"CollectionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectionFeeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFees\",\"type\":\"uint256\"}],\"name\":\"CollectionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DistantFinance.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"}],\"name\":\"CollectionVerificationStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"securityFee\",\"type\":\"uint16\"}],\"name\":\"ProtocolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"ProtocolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevenueWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"protocolFeeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFees\",\"type\":\"uint256\"}],\"name\":\"addCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_protocolFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_securityFee\",\"type\":\"uint16\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"getCollectionData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFees\",\"type\":\"uint256\"},{\"internalType\":\"enum DistantFinance.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct DistantFinance.Collection\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_supportedCollections\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSupportedProtocol\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"removeCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"removeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFees\",\"type\":\"uint256\"}],\"name\":\"updateCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"updateRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRevenueCollector\",\"type\":\"address\"}],\"name\":\"updateRevenueCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newprotocolFee\",\"type\":\"uint16\"}],\"name\":\"updateprotocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"verifyCollectionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addCollection(address,address,uint256)\":{\"params\":{\"_collection\":\"address of the collection\",\"_collectionAddress\":\"address of the royalty fees receiver\",\"_royaltyFees\":\"uint256 of the royalty fees\"}},\"constructor\":{\"params\":{\"_WETH\":\"address of the _WETH token\",\"_admin\":\"address of the proxy admin\",\"_protocolFee\":\"fee to be in counts of 100: 1% == 100, 10% = 1000\",\"_revenueCollector\":\"address of the revenue collector\"}},\"getCollectionData(address)\":{\"params\":{\"_collection\":\"address to check offer from\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverToken(address)\":{\"params\":{\"_token\":\"address of the token to recover\"}},\"removeCollection(address)\":{\"params\":{\"_collection\":\"address of the collection\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdmin(address)\":{\"params\":{\"_newAdmin\":\"address of the new admin\"}},\"updateCollection(address,address,uint256)\":{\"params\":{\"_collection\":\"address of the collection\",\"_collectionAddress\":\"address of the royalty fees receiver\",\"_royaltyFees\":\"uint256 of the royalty fees\"}},\"updateProxyAdmin(address)\":{\"params\":{\"_newAdmin\":\"address of the new admin\"}},\"updateRevenueCollector(address)\":{\"params\":{\"_newRevenueCollector\":\"address of the new revenue collector\"}},\"updateprotocolFee(uint16)\":{\"params\":{\"_newprotocolFee\":\"uint16 of the new protocol fee\"}},\"verifyCollectionStatus(address,string)\":{\"params\":{\"_collection\":\"address of the collection\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollection(address,address,uint256)\":{\"notice\":\"Add a collection to the Protocol\"},\"constructor\":{\"notice\":\"Constructor for the Protocol\"},\"getAccountRevenue(address)\":{\"notice\":\"All read functions\"},\"getCollectionData(address)\":{\"notice\":\"a public getter function to get a collection information from the collection mapping\"},\"getSupportedCollections()\":{\"notice\":\"Get all collections supported by the Protocol\"},\"recoverToken(address)\":{\"notice\":\"recover any ERC20 token sent to the contract\"},\"removeCollection(address)\":{\"notice\":\"Remove a collection from the Protocol\"},\"updateAdmin(address)\":{\"notice\":\"update the admin address\"},\"updateCollection(address,address,uint256)\":{\"notice\":\"Update a collection to the Protocol\"},\"updateProxyAdmin(address)\":{\"notice\":\"update the proxy admin address\"},\"updateRevenueCollector(address)\":{\"notice\":\"update the revenue collector address\"},\"updateprotocolFee(uint16)\":{\"notice\":\"update the protocol fee\"},\"verifyCollectionStatus(address,string)\":{\"notice\":\"Verify a collection from the Protocol\"},\"withdrawRevenue()\":{\"notice\":\"Withdraw revenue generated from the Protocol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Protocol.sol\":\"DistantFinance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Protocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\ninterface IWETH {\\r\\n\\tfunction deposit() external payable;\\r\\n}\\r\\n\\r\\ncontract DistantFinance is Context, Ownable, Pausable, ReentrancyGuard {\\r\\n\\t// Libraries\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\tusing Address for address;\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\t// Variables\\r\\n\\taddress private immutable WETH; // Native ERC20 token for protocols\\r\\n\\tuint16 public protocolFee; // Protocol fee\\r\\n\\taddress public admin; // Protocol controller\\r\\n\\tuint16 private constant minFees = 0; // 1% == 100 etc.\\r\\n\\tuint16 private constant maxFees = 1000; // 1000 == 10%\\r\\n\\taddress private proxyAdmin; // Protocol data management\\r\\n\\taddress private revenueCollector; // Protocol revenue collector\\r\\n\\r\\n\\t// Enums\\r\\n\\tenum Status {\\r\\n\\t\\tUnverified,\\r\\n\\t\\tVerified\\r\\n\\t}\\r\\n\\r\\n\\t// Events\\r\\n\\tevent CollectionAdded(\\r\\n\\t\\taddress indexed collection,\\r\\n\\t\\taddress collectionFeeCollector,\\r\\n\\t\\tuint256 royaltyFees\\r\\n\\t);\\r\\n\\tevent CollectionUpdated(\\r\\n\\t\\taddress indexed collection,\\r\\n\\t\\taddress collectionFeeCollector,\\r\\n\\t\\tuint256 royaltyFees\\r\\n\\t);\\r\\n\\tevent CollectionVerificationStatus(\\r\\n\\t\\taddress indexed collection,\\r\\n\\t\\tStatus status,\\r\\n\\t\\tstring ipfs\\r\\n\\t);\\r\\n\\tevent CollectionRemoved(address indexed collection);\\r\\n\\tevent protocolFeeUpdated(uint256 fees);\\r\\n\\tevent RevenueWithdrawn(address indexed account, uint256 amount);\\r\\n\\tevent ProtocolRemoved(address indexed protocol);\\r\\n\\tevent ProtocolCreated(\\r\\n\\t\\taddress indexed protocol,\\r\\n\\t\\tstring name,\\r\\n\\t\\tuint16 protocolFee,\\r\\n\\t\\tuint16 securityFee\\r\\n\\t);\\r\\n\\r\\n\\t// Constructor\\r\\n\\t/**\\r\\n\\t * @notice Constructor for the Protocol\\r\\n\\t * @param _protocolFee fee to be in counts of 100: 1% == 100, 10% = 1000\\r\\n\\t * @param _admin address of the proxy admin\\r\\n\\t * @param _WETH address of the _WETH token\\r\\n\\t * @param _revenueCollector address of the revenue collector\\r\\n\\t */\\r\\n\\tconstructor(\\r\\n\\t\\tuint16 _protocolFee, // fee to be in counts of 100: 1% = 100, 10% = 1000\\r\\n\\t\\taddress _admin,\\r\\n\\t\\taddress _WETH,\\r\\n\\t\\taddress _revenueCollector\\r\\n\\t) {\\r\\n\\t\\tprotocolFee = _protocolFee;\\r\\n\\t\\tadmin = _msgSender();\\r\\n\\t\\tproxyAdmin = _admin;\\r\\n\\t\\tWETH = _WETH;\\r\\n\\t\\trevenueCollector = _revenueCollector;\\r\\n\\t\\tOwnable(_msgSender());\\r\\n\\t}\\r\\n\\r\\n\\t// Structs\\r\\n\\t// A struct that tracks the royalty fees collection address, its royalty fees and state of its verification. Paramount for future updates when making the Protocol decentralized\\r\\n\\tstruct Collection {\\r\\n\\t\\taddress collectionAddress;\\r\\n\\t\\tuint256 royaltyFees;\\r\\n\\t\\tStatus status;\\r\\n\\t}\\r\\n\\t// An address set of all supported collections\\r\\n\\tEnumerableSet.AddressSet private collections;\\r\\n\\r\\n\\t// data mappings\\r\\n\\t// tracks the revenue generation for the protocol and the collection royalty fees\\r\\n\\tmapping(address => uint256) private revenue;\\r\\n\\t// Maps a collection address to its information\\r\\n\\tmapping(address => Collection) private collection;\\r\\n\\t// All supported in-house contracts\\r\\n\\tmapping(address => bool) private isProtocol;\\r\\n\\r\\n\\t/// All read functions\\r\\n\\tfunction getAccountRevenue(\\r\\n\\t\\taddress _account\\r\\n\\t) external view returns (uint256) {\\r\\n\\t\\treturn revenue[_account];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Get all collections supported by the Protocol\\r\\n\\t */\\r\\n\\tfunction getSupportedCollections()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (address[] memory _supportedCollections)\\r\\n\\t{\\r\\n\\t\\tuint256 length = collections.length();\\r\\n\\t\\t_supportedCollections = new address[](length);\\r\\n\\t\\tfor (uint256 i; i < length; i++) {\\r\\n\\t\\t\\t_supportedCollections[i] = collections.at(i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice a public getter function to get a collection information from the collection mapping\\r\\n\\t * @param _collection address to check offer from\\r\\n\\t */\\r\\n\\tfunction getCollectionData(\\r\\n\\t\\taddress _collection\\r\\n\\t) public view returns (Collection memory) {\\r\\n\\t\\treturn collection[_collection];\\r\\n\\t}\\r\\n\\r\\n\\t// Modifiers\\r\\n\\t// modifier to check that only admin can call the function\\r\\n\\tmodifier isAdmin() {\\r\\n\\t\\trequire(_msgSender() == admin, \\\"Caller != Admin\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\t// modifier to check that only proxy admin can call the function\\r\\n\\tmodifier isProxyAdmin() {\\r\\n\\t\\trequire(_msgSender() == proxyAdmin, \\\"Caller != Proxy Admin\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\t// modifier to check if a collection is supported\\r\\n\\tmodifier isCollection(address _collection) {\\r\\n\\t\\trequire(collections.contains(_collection), \\\"Collection not supported\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\t// modifier to limit certain external functions from being called by external users\\r\\n\\tmodifier isProtocolCall() {\\r\\n\\t\\trequire(isSupportedProtocol(_msgSender()));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isSupportedProtocol(address _address) public view returns (bool) {\\r\\n\\t\\treturn isProtocol[_address];\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateRevenue(\\r\\n\\t\\tuint256 ProtocolFee,\\r\\n\\t\\tuint256 collectionFee,\\r\\n\\t\\taddress _collection\\r\\n\\t) external isProtocolCall {\\r\\n\\t\\t_updateRevenue(ProtocolFee, collectionFee, _collection);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _updateRevenue(\\r\\n\\t\\tuint256 ProtocolFee,\\r\\n\\t\\tuint256 collectionFee,\\r\\n\\t\\taddress _collection\\r\\n\\t) private {\\r\\n\\t\\tif (collectionFee != 0) {\\r\\n\\t\\t\\taddress collectionFeeCollector = collection[_collection]\\r\\n\\t\\t\\t\\t.collectionAddress;\\r\\n\\t\\t\\trevenue[collectionFeeCollector] += collectionFee;\\r\\n\\t\\t}\\r\\n\\t\\tif (ProtocolFee != 0) {\\r\\n\\t\\t\\trevenue[revenueCollector] += ProtocolFee;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n// fee to be in counts of 100: 1% = 100, 10% = 1000\\r\\n\\tfunction calculateFee(\\r\\n\\t\\taddress _collection,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tuint256 _protocolFee\\r\\n\\t)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 amount, uint256 ProtocolFee, uint256 collectionFee)\\r\\n\\t{\\r\\n\\t\\tProtocolFee = (_value * _protocolFee) / 10000;\\r\\n\\t\\tcollectionFee = (_value * collection[_collection].royaltyFees) / 10000;\\r\\n\\t\\tamount = _value - (ProtocolFee + collectionFee);\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice Add a collection to the Protocol\\r\\n        @param _collection address of the collection\\r\\n        @param _collectionAddress address of the royalty fees receiver\\r\\n        @param _royaltyFees uint256 of the royalty fees\\r\\n    */\\r\\n\\tfunction addCollection(\\r\\n\\t\\taddress _collection,\\r\\n\\t\\taddress _collectionAddress,\\r\\n\\t\\tuint256 _royaltyFees\\r\\n\\t) external whenNotPaused isAdmin {\\r\\n\\t\\trequire(!collections.contains(_collection), \\\"Collection exists\\\");\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tIERC721(_collection).supportsInterface(0x80ac58cd),\\r\\n\\t\\t\\t\\\"not supported\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_royaltyFees >= minFees && _royaltyFees <= (maxFees - protocolFee),\\r\\n\\t\\t\\t\\\"fees error\\\"\\r\\n\\t\\t);\\r\\n\\t\\tcollections.add(_collection);\\r\\n\\t\\tcollection[_collection] = Collection(\\r\\n\\t\\t\\t_collectionAddress,\\r\\n\\t\\t\\t_royaltyFees,\\r\\n\\t\\t\\tStatus.Unverified\\r\\n\\t\\t);\\r\\n\\t\\temit CollectionAdded(_collection, _collectionAddress, _royaltyFees);\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice Update a collection to the Protocol\\r\\n        @param _collection address of the collection\\r\\n        @param _collectionAddress address of the royalty fees receiver\\r\\n        @param _royaltyFees uint256 of the royalty fees\\r\\n    */\\r\\n\\tfunction updateCollection(\\r\\n\\t\\taddress _collection,\\r\\n\\t\\taddress _collectionAddress,\\r\\n\\t\\tuint256 _royaltyFees\\r\\n\\t) external whenNotPaused isCollection(_collection) isAdmin {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_royaltyFees >= minFees && _royaltyFees <= (maxFees - protocolFee),\\r\\n\\t\\t\\t\\\"high fees\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t_msgSender() == collection[_collection].collectionAddress,\\r\\n\\t\\t\\t\\\"Only Collection admin can update\\\"\\r\\n\\t\\t);\\r\\n\\t\\tcollection[_collection] = Collection(\\r\\n\\t\\t\\t_collectionAddress,\\r\\n\\t\\t\\t_royaltyFees,\\r\\n\\t\\t\\tStatus.Unverified\\r\\n\\t\\t);\\r\\n\\t\\temit CollectionUpdated(_collection, _collectionAddress, _royaltyFees);\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice Remove a collection from the Protocol\\r\\n        @param _collection address of the collection\\r\\n    */\\r\\n\\tfunction removeCollection(\\r\\n\\t\\taddress _collection\\r\\n\\t) external whenNotPaused isAdmin isCollection(_collection) {\\r\\n\\t\\tcollections.remove(_collection);\\r\\n\\t\\tdelete (collection[_collection]);\\r\\n\\t\\temit CollectionRemoved(_collection);\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice Verify a collection from the Protocol\\r\\n        @param _collection address of the collection\\r\\n    */\\r\\n\\tfunction verifyCollectionStatus(\\r\\n\\t\\taddress _collection,\\r\\n\\t\\tstring calldata _ipfsHash\\r\\n\\t) external isAdmin isCollection(_collection) {\\r\\n\\t\\tCollection storage collectionStatus = collection[_collection];\\r\\n\\t\\tcollectionStatus.status = Status.Verified;\\r\\n\\t\\temit CollectionVerificationStatus(\\r\\n\\t\\t\\t_collection,\\r\\n\\t\\t\\tcollectionStatus.status,\\r\\n\\t\\t\\t_ipfsHash\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Withdraw revenue generated from the Protocol\\r\\n\\t */\\r\\n\\tfunction withdrawRevenue() external whenNotPaused nonReentrant {\\r\\n\\t\\tuint256 revenueGenerated = revenue[_msgSender()];\\r\\n\\t\\trequire(revenueGenerated != 0, \\\"revenue = 0\\\");\\r\\n\\t\\trevenue[_msgSender()] = 0;\\r\\n\\t\\tIERC20(WETH).safeTransfer(_msgSender(), revenueGenerated);\\r\\n\\t\\temit RevenueWithdrawn(_msgSender(), revenueGenerated);\\r\\n\\t}\\r\\n\\r\\n\\t//OnlyOwner function calls\\r\\n\\t/** \\r\\n        @notice update the protocol fee\\r\\n        @param _newprotocolFee uint16 of the new protocol fee\\r\\n    */\\r\\n\\tfunction updateprotocolFee(\\r\\n\\t\\tuint16 _newprotocolFee\\r\\n\\t) external whenPaused onlyOwner {\\r\\n\\t\\tprotocolFee = _newprotocolFee;\\r\\n\\t\\temit protocolFeeUpdated(_newprotocolFee);\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice update the admin address\\r\\n        @param _newAdmin address of the new admin\\r\\n    */\\r\\n\\tfunction updateAdmin(address _newAdmin) external whenPaused onlyOwner {\\r\\n\\t\\tadmin = _newAdmin;\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice update the proxy admin address\\r\\n        @param _newAdmin address of the new admin\\r\\n    */\\r\\n\\tfunction updateProxyAdmin(address _newAdmin) external whenPaused onlyOwner {\\r\\n\\t\\tproxyAdmin = _newAdmin;\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice update the revenue collector address\\r\\n        @param _newRevenueCollector address of the new revenue collector\\r\\n    */\\r\\n\\tfunction updateRevenueCollector(\\r\\n\\t\\taddress _newRevenueCollector\\r\\n\\t) external whenPaused onlyOwner {\\r\\n\\t\\trevenueCollector = _newRevenueCollector;\\r\\n\\t}\\r\\n\\r\\n\\tfunction addProtocol(\\r\\n\\t\\taddress _protocol,\\r\\n\\t\\tstring calldata _name,\\r\\n\\t\\tuint16 _protocolFee,\\r\\n\\t\\tuint16 _securityFee\\r\\n\\t) external onlyOwner {\\r\\n\\t\\tisProtocol[_protocol] = true;\\r\\n\\t\\temit ProtocolCreated(_protocol, _name, _protocolFee, _securityFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeProtocol(address _protocol) external onlyOwner {\\r\\n\\t\\tisProtocol[_protocol] = false;\\r\\n\\t\\temit ProtocolRemoved(_protocol);\\r\\n\\t}\\r\\n\\r\\n\\t/** \\r\\n        @notice recover any ERC20 token sent to the contract\\r\\n        @param _token address of the token to recover\\r\\n    */\\r\\n\\tfunction recoverToken(address _token) external whenPaused onlyOwner {\\r\\n\\t\\trequire(_token != WETH, \\\"Cannot recover\\\");\\r\\n\\t\\tif (_token == address(0)) {\\r\\n\\t\\t\\tuint etherBalance = address(this).balance;\\r\\n\\t\\t\\trequire(etherBalance > 0, \\\"Ether balance is 0\\\");\\r\\n\\t\\t\\t(bool sent, ) = admin.call{ value: etherBalance }(\\\"\\\");\\r\\n\\t\\t\\trequire(sent, \\\"Failed to send Ether\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tIERC20 token = IERC20(_token);\\r\\n\\t\\t\\tuint balanceOf = token.balanceOf(address(this));\\r\\n\\t\\t\\ttoken.safeTransfer(_msgSender(), balanceOf);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction pause() external whenNotPaused onlyOwner {\\r\\n\\t\\t_pause();\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause() external whenPaused onlyOwner {\\r\\n\\t\\t_unpause();\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x23f0aa326365c4887b85d16a6f75277232a9b6d26bae93861ff08bf015495b24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001f9238038062001f92833981016040819052620000349162000139565b6200003f33620000cc565b6000805460ff60a01b19169055600180556002805461ffff191661ffff8616179055620000693390565b6002805462010000600160b01b031916620100006001600160a01b0393841602179055600380546001600160a01b03199081168684161790915583821660805260048054909116918316919091179055620000c13390565b50505050506200019e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013457600080fd5b919050565b600080600080608085870312156200015057600080fd5b845161ffff811681146200016357600080fd5b935062000173602086016200011c565b925062000183604086016200011c565b915062000193606086016200011c565b905092959194509250565b608051611dd1620001c16000396000818161060f01526109260152611dd16000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063bb48cd3a11610097578063ee2d36dc11610071578063ee2d36dc146103a2578063f2fde38b146103b5578063f851a440146103c8578063ffa4b9c1146103e157600080fd5b8063bb48cd3a14610369578063bc231f5b1461037c578063e2f273bd1461038f57600080fd5b80638da5cb5b146102b35780638fe983bf146102d8578063969729ae1461030f5780639be65a6014610322578063a6745edb14610335578063b0e21e8a1461034857600080fd5b80635028d05a1161014b5780636f1ac2ce116101255780636f1ac2ce14610257578063715018a6146102775780637ed6a4061461027f5780638456cb59146102ab57600080fd5b80635028d05a1461021357806354bb0c1d146102265780635c975abb1461023957600080fd5b80630324ef9c146101935780630f3f9cd2146101c657806317dd5a48146101db57806318ff5768146101f05780633f4ba83a146102035780634f573cb21461020b575b600080fd5b6101a66101a1366004611887565b6103f4565b604080519384526020840192909252908201526060015b60405180910390f35b6101d96101d43660046118ba565b610467565b005b6101e3610489565b6040516101bd91906118ef565b6101d96101fe36600461193c565b61052b565b6101d961057c565b6101d9610596565b6101d961022136600461193c565b61067d565b6101d961023436600461193c565b610754565b600054600160a01b900460ff165b60405190151581526020016101bd565b61026a61026536600461193c565b610786565b6040516101bd919061198f565b6101d9610819565b61024761028d36600461193c565b6001600160a01b031660009081526009602052604090205460ff1690565b6101d961082b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101bd565b6103016102e636600461193c565b6001600160a01b031660009081526007602052604090205490565b6040519081526020016101bd565b6101d961031d366004611a06565b610843565b6101d961033036600461193c565b610914565b6101d9610343366004611a59565b610b0d565b6002546103569061ffff1681565b60405161ffff90911681526020016101bd565b6101d961037736600461193c565b610d7d565b6101d961038a366004611aa7565b610daf565b6101d961039d36600461193c565b610e09565b6101d96103b0366004611ac2565b610e43565b6101d96103c336600461193c565b610ea4565b6002546102c0906201000090046001600160a01b031681565b6101d96103ef366004611a59565b610f1a565b600080806127106104058587611b4e565b61040f9190611b65565b6001600160a01b0387166000908152600860205260409020600101549092506127109061043c9087611b4e565b6104469190611b65565b90506104528183611b87565b61045c9086611b9a565b925093509350939050565b6104703361028d565b61047957600080fd5b610484838383611118565b505050565b60606000610497600561119a565b90508067ffffffffffffffff8111156104b2576104b2611bad565b6040519080825280602002602001820160405280156104db578160200160208202803683370190505b50915060005b81811015610526576104f46005826111aa565b83828151811061050657610506611bc3565b6001600160a01b03909216602092830291909101909101526001016104e1565b505090565b6105336111bd565b6001600160a01b038116600081815260096020526040808220805460ff19169055517f545a47f45f6f5fab1172cfde7faf3060e7d44c9d5808a2c80cfab52150b555339190a250565b610584611217565b61058c6111bd565b610594611267565b565b61059e6112bc565b6105a6611309565b33600090815260076020526040812054908190036105f95760405162461bcd60e51b815260206004820152600b60248201526a0726576656e7565203d20360ac1b60448201526064015b60405180910390fd5b3360008181526007602052604081205561063e907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083611362565b60405181815233907f86a5cc8fe9af9ae68fb50f62885307a7755a30cbd290131644377f0bd94a71819060200160405180910390a25061059460018055565b6106856112bc565b6002546201000090046001600160a01b0316336001600160a01b0316146106be5760405162461bcd60e51b81526004016105f090611bd9565b806106ca6005826113b4565b6106e65760405162461bcd60e51b81526004016105f090611c02565b6106f16005836113d6565b506001600160a01b03821660008181526008602052604080822080546001600160a01b031916815560018101839055600201805460ff19169055517fa0691bd707b2f65c33c8343d61c274df72c6b5007937dcfbc31aa5a0d0f6fe3c9190a25050565b61075c611217565b6107646111bd565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6107a760408051606081018252600080825260208201819052909182015290565b6001600160a01b03808316600090815260086020908152604091829020825160608101845281549094168452600180820154928501929092526002810154909284019160ff909116908111156107ff576107ff611957565b600181111561081057610810611957565b90525092915050565b6108216111bd565b61059460006113eb565b6108336112bc565b61083b6111bd565b61059461143b565b6002546201000090046001600160a01b0316336001600160a01b03161461087c5760405162461bcd60e51b81526004016105f090611bd9565b826108886005826113b4565b6108a45760405162461bcd60e51b81526004016105f090611c02565b6001600160a01b0384166000818152600860205260409081902060028101805460ff1916600190811790915591519092917f4ee5f8465521acf91d5b8064cdbad2cb9a9ecbe55514fd23918c6aeb9e59b20891610905919088908890611c62565b60405180910390a25050505050565b61091c611217565b6109246111bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036109965760405162461bcd60e51b815260206004820152600e60248201526d21b0b73737ba103932b1b7bb32b960911b60448201526064016105f0565b6001600160a01b038116610a875747806109e75760405162461bcd60e51b8152602060048201526012602482015271045746865722062616c616e636520697320360741b60448201526064016105f0565b6002546040516000916201000090046001600160a01b03169083908381818185875af1925050503d8060008114610a3a576040519150601f19603f3d011682016040523d82523d6000602084013e610a3f565b606091505b50509050806104845760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016105f0565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190611c8c565b90506104846001600160a01b0383163383611362565b50565b610b156112bc565b6002546201000090046001600160a01b0316336001600160a01b031614610b4e5760405162461bcd60e51b81526004016105f090611bd9565b610b596005846113b4565b15610b9a5760405162461bcd60e51b8152602060048201526011602482015270436f6c6c656374696f6e2065786973747360781b60448201526064016105f0565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a790602401602060405180830381865afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190611ca5565b610c455760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081cdd5c1c1bdc9d1959609a1b60448201526064016105f0565b600254610c589061ffff166103e8611cc7565b61ffff16811115610c985760405162461bcd60e51b815260206004820152600a6024820152693332b2b99032b93937b960b11b60448201526064016105f0565b610ca360058461147e565b50604080516060810182526001600160a01b038416815260208101839052908101600090526001600160a01b03848116600090815260086020908152604091829020845181546001600160a01b0319169416939093178355830151600180840191909155908301516002830180549192909160ff1916908381811115610d2b57610d2b611957565b021790555050604080516001600160a01b03858116825260208201859052861692507f2a5e614d870607e6f8e37faa3d03029a584442d1ce60b3b292851a04452a95da910160405180910390a2505050565b610d85611217565b610d8d6111bd565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610db7611217565b610dbf6111bd565b6002805461ffff191661ffff83169081179091556040519081527fe9fdf34dbcbe57c72bf663fd28b9e46c66dfa8e41bb215746c2f4373641edc389060200160405180910390a150565b610e11611217565b610e196111bd565b600280546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b610e4b6111bd565b6001600160a01b03851660008181526009602052604090819020805460ff19166001179055517ff2a9f3954e120c6dde56df5a1f9c858cdf9f14504c0bacc9defc2d9a4ddd719b90610905908790879087908790611ce2565b610eac6111bd565b6001600160a01b038116610f115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105f0565b610b0a816113eb565b610f226112bc565b82610f2e6005826113b4565b610f4a5760405162461bcd60e51b81526004016105f090611c02565b6002546201000090046001600160a01b0316336001600160a01b031614610f835760405162461bcd60e51b81526004016105f090611bd9565b600254610f969061ffff166103e8611cc7565b61ffff16821115610fd55760405162461bcd60e51b815260206004820152600960248201526868696768206665657360b81b60448201526064016105f0565b6001600160a01b0384811660009081526008602052604090205416331461103e5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920436f6c6c656374696f6e2061646d696e2063616e2075706461746560448201526064016105f0565b604080516060810182526001600160a01b038516815260208101849052908101600090526001600160a01b03858116600090815260086020908152604091829020845181546001600160a01b0319169416939093178355830151600180840191909155908301516002830180549192909160ff19169083818111156110c5576110c5611957565b021790555050604080516001600160a01b03868116825260208201869052871692507f1e37bc437a6eef66beaf65888fcbb24a15cbac885105fc4b3cb99f3e1a90da21910160405180910390a250505050565b8115611160576001600160a01b0380821660009081526008602090815260408083205490931680835260079091529181208054859290611159908490611b87565b9091555050505b8215610484576004546001600160a01b031660009081526007602052604081208054859290611190908490611b87565b9091555050505050565b60006111a4825490565b92915050565b60006111b68383611493565b9392505050565b6000546001600160a01b031633146105945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f0565b600054600160a01b900460ff166105945760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105f0565b61126f611217565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156105945760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105f0565b60026001540361135b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f0565b6002600155565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104849084906114bd565b6001600160a01b038116600090815260018301602052604081205415156111b6565b60006111b6836001600160a01b038416611592565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114436112bc565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861129f3390565b60006111b6836001600160a01b03841661168c565b60008260000182815481106114aa576114aa611bc3565b9060005260206000200154905092915050565b6000611512826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116db9092919063ffffffff16565b90508051600014806115335750808060200190518101906115339190611ca5565b6104845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105f0565b6000818152600183016020526040812054801561167b5760006115b6600183611b9a565b85549091506000906115ca90600190611b9a565b905081811461162f5760008660000182815481106115ea576115ea611bc3565b906000526020600020015490508087600001848154811061160d5761160d611bc3565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061164057611640611d12565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111a4565b60009150506111a4565b5092915050565b60008181526001830160205260408120546116d3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111a4565b5060006111a4565b60606116ea84846000856116f2565b949350505050565b6060824710156117535760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105f0565b600080866001600160a01b0316858760405161176f9190611d4c565b60006040518083038185875af1925050503d80600081146117ac576040519150601f19603f3d011682016040523d82523d6000602084013e6117b1565b606091505b50915091506117c2878383876117cd565b979650505050505050565b6060831561183c578251600003611835576001600160a01b0385163b6118355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f0565b50816116ea565b6116ea83838151156118515781518083602001fd5b8060405162461bcd60e51b81526004016105f09190611d68565b80356001600160a01b038116811461188257600080fd5b919050565b60008060006060848603121561189c57600080fd5b6118a58461186b565b95602085013595506040909401359392505050565b6000806000606084860312156118cf57600080fd5b83359250602084013591506118e66040850161186b565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156119305783516001600160a01b03168352928401929184019160010161190b565b50909695505050505050565b60006020828403121561194e57600080fd5b6111b68261186b565b634e487b7160e01b600052602160045260246000fd5b6002811061198b57634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526020808301519082015260408083015160608301916116859084018261196d565b60008083601f8401126119cf57600080fd5b50813567ffffffffffffffff8111156119e757600080fd5b6020830191508360208285010111156119ff57600080fd5b9250929050565b600080600060408486031215611a1b57600080fd5b611a248461186b565b9250602084013567ffffffffffffffff811115611a4057600080fd5b611a4c868287016119bd565b9497909650939450505050565b600080600060608486031215611a6e57600080fd5b611a778461186b565b9250611a856020850161186b565b9150604084013590509250925092565b803561ffff8116811461188257600080fd5b600060208284031215611ab957600080fd5b6111b682611a95565b600080600080600060808688031215611ada57600080fd5b611ae38661186b565b9450602086013567ffffffffffffffff811115611aff57600080fd5b611b0b888289016119bd565b9095509350611b1e905060408701611a95565b9150611b2c60608701611a95565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176111a4576111a4611b38565b600082611b8257634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156111a4576111a4611b38565b818103818111156111a4576111a4611b38565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252600f908201526e21b0b63632b910109e9020b236b4b760891b604082015260600190565b60208082526018908201527f436f6c6c656374696f6e206e6f7420737570706f727465640000000000000000604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b611c6c818561196d565b604060208201526000611c83604083018486611c39565b95945050505050565b600060208284031215611c9e57600080fd5b5051919050565b600060208284031215611cb757600080fd5b815180151581146111b657600080fd5b61ffff82811682821603908082111561168557611685611b38565b606081526000611cf6606083018688611c39565b61ffff9485166020840152929093166040909101529392505050565b634e487b7160e01b600052603160045260246000fd5b60005b83811015611d43578181015183820152602001611d2b565b50506000910152565b60008251611d5e818460208701611d28565b9190910192915050565b6020815260008251806020840152611d87816040850160208701611d28565b601f01601f1916919091016040019291505056fea2646970667358221220aef998a6b649392c937274dd5d63760d1009dbb8f9cf1fb4306fb4afe78ce13764736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063bb48cd3a11610097578063ee2d36dc11610071578063ee2d36dc146103a2578063f2fde38b146103b5578063f851a440146103c8578063ffa4b9c1146103e157600080fd5b8063bb48cd3a14610369578063bc231f5b1461037c578063e2f273bd1461038f57600080fd5b80638da5cb5b146102b35780638fe983bf146102d8578063969729ae1461030f5780639be65a6014610322578063a6745edb14610335578063b0e21e8a1461034857600080fd5b80635028d05a1161014b5780636f1ac2ce116101255780636f1ac2ce14610257578063715018a6146102775780637ed6a4061461027f5780638456cb59146102ab57600080fd5b80635028d05a1461021357806354bb0c1d146102265780635c975abb1461023957600080fd5b80630324ef9c146101935780630f3f9cd2146101c657806317dd5a48146101db57806318ff5768146101f05780633f4ba83a146102035780634f573cb21461020b575b600080fd5b6101a66101a1366004611887565b6103f4565b604080519384526020840192909252908201526060015b60405180910390f35b6101d96101d43660046118ba565b610467565b005b6101e3610489565b6040516101bd91906118ef565b6101d96101fe36600461193c565b61052b565b6101d961057c565b6101d9610596565b6101d961022136600461193c565b61067d565b6101d961023436600461193c565b610754565b600054600160a01b900460ff165b60405190151581526020016101bd565b61026a61026536600461193c565b610786565b6040516101bd919061198f565b6101d9610819565b61024761028d36600461193c565b6001600160a01b031660009081526009602052604090205460ff1690565b6101d961082b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101bd565b6103016102e636600461193c565b6001600160a01b031660009081526007602052604090205490565b6040519081526020016101bd565b6101d961031d366004611a06565b610843565b6101d961033036600461193c565b610914565b6101d9610343366004611a59565b610b0d565b6002546103569061ffff1681565b60405161ffff90911681526020016101bd565b6101d961037736600461193c565b610d7d565b6101d961038a366004611aa7565b610daf565b6101d961039d36600461193c565b610e09565b6101d96103b0366004611ac2565b610e43565b6101d96103c336600461193c565b610ea4565b6002546102c0906201000090046001600160a01b031681565b6101d96103ef366004611a59565b610f1a565b600080806127106104058587611b4e565b61040f9190611b65565b6001600160a01b0387166000908152600860205260409020600101549092506127109061043c9087611b4e565b6104469190611b65565b90506104528183611b87565b61045c9086611b9a565b925093509350939050565b6104703361028d565b61047957600080fd5b610484838383611118565b505050565b60606000610497600561119a565b90508067ffffffffffffffff8111156104b2576104b2611bad565b6040519080825280602002602001820160405280156104db578160200160208202803683370190505b50915060005b81811015610526576104f46005826111aa565b83828151811061050657610506611bc3565b6001600160a01b03909216602092830291909101909101526001016104e1565b505090565b6105336111bd565b6001600160a01b038116600081815260096020526040808220805460ff19169055517f545a47f45f6f5fab1172cfde7faf3060e7d44c9d5808a2c80cfab52150b555339190a250565b610584611217565b61058c6111bd565b610594611267565b565b61059e6112bc565b6105a6611309565b33600090815260076020526040812054908190036105f95760405162461bcd60e51b815260206004820152600b60248201526a0726576656e7565203d20360ac1b60448201526064015b60405180910390fd5b3360008181526007602052604081205561063e907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083611362565b60405181815233907f86a5cc8fe9af9ae68fb50f62885307a7755a30cbd290131644377f0bd94a71819060200160405180910390a25061059460018055565b6106856112bc565b6002546201000090046001600160a01b0316336001600160a01b0316146106be5760405162461bcd60e51b81526004016105f090611bd9565b806106ca6005826113b4565b6106e65760405162461bcd60e51b81526004016105f090611c02565b6106f16005836113d6565b506001600160a01b03821660008181526008602052604080822080546001600160a01b031916815560018101839055600201805460ff19169055517fa0691bd707b2f65c33c8343d61c274df72c6b5007937dcfbc31aa5a0d0f6fe3c9190a25050565b61075c611217565b6107646111bd565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6107a760408051606081018252600080825260208201819052909182015290565b6001600160a01b03808316600090815260086020908152604091829020825160608101845281549094168452600180820154928501929092526002810154909284019160ff909116908111156107ff576107ff611957565b600181111561081057610810611957565b90525092915050565b6108216111bd565b61059460006113eb565b6108336112bc565b61083b6111bd565b61059461143b565b6002546201000090046001600160a01b0316336001600160a01b03161461087c5760405162461bcd60e51b81526004016105f090611bd9565b826108886005826113b4565b6108a45760405162461bcd60e51b81526004016105f090611c02565b6001600160a01b0384166000818152600860205260409081902060028101805460ff1916600190811790915591519092917f4ee5f8465521acf91d5b8064cdbad2cb9a9ecbe55514fd23918c6aeb9e59b20891610905919088908890611c62565b60405180910390a25050505050565b61091c611217565b6109246111bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036109965760405162461bcd60e51b815260206004820152600e60248201526d21b0b73737ba103932b1b7bb32b960911b60448201526064016105f0565b6001600160a01b038116610a875747806109e75760405162461bcd60e51b8152602060048201526012602482015271045746865722062616c616e636520697320360741b60448201526064016105f0565b6002546040516000916201000090046001600160a01b03169083908381818185875af1925050503d8060008114610a3a576040519150601f19603f3d011682016040523d82523d6000602084013e610a3f565b606091505b50509050806104845760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016105f0565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190611c8c565b90506104846001600160a01b0383163383611362565b50565b610b156112bc565b6002546201000090046001600160a01b0316336001600160a01b031614610b4e5760405162461bcd60e51b81526004016105f090611bd9565b610b596005846113b4565b15610b9a5760405162461bcd60e51b8152602060048201526011602482015270436f6c6c656374696f6e2065786973747360781b60448201526064016105f0565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a790602401602060405180830381865afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190611ca5565b610c455760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081cdd5c1c1bdc9d1959609a1b60448201526064016105f0565b600254610c589061ffff166103e8611cc7565b61ffff16811115610c985760405162461bcd60e51b815260206004820152600a6024820152693332b2b99032b93937b960b11b60448201526064016105f0565b610ca360058461147e565b50604080516060810182526001600160a01b038416815260208101839052908101600090526001600160a01b03848116600090815260086020908152604091829020845181546001600160a01b0319169416939093178355830151600180840191909155908301516002830180549192909160ff1916908381811115610d2b57610d2b611957565b021790555050604080516001600160a01b03858116825260208201859052861692507f2a5e614d870607e6f8e37faa3d03029a584442d1ce60b3b292851a04452a95da910160405180910390a2505050565b610d85611217565b610d8d6111bd565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610db7611217565b610dbf6111bd565b6002805461ffff191661ffff83169081179091556040519081527fe9fdf34dbcbe57c72bf663fd28b9e46c66dfa8e41bb215746c2f4373641edc389060200160405180910390a150565b610e11611217565b610e196111bd565b600280546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b610e4b6111bd565b6001600160a01b03851660008181526009602052604090819020805460ff19166001179055517ff2a9f3954e120c6dde56df5a1f9c858cdf9f14504c0bacc9defc2d9a4ddd719b90610905908790879087908790611ce2565b610eac6111bd565b6001600160a01b038116610f115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105f0565b610b0a816113eb565b610f226112bc565b82610f2e6005826113b4565b610f4a5760405162461bcd60e51b81526004016105f090611c02565b6002546201000090046001600160a01b0316336001600160a01b031614610f835760405162461bcd60e51b81526004016105f090611bd9565b600254610f969061ffff166103e8611cc7565b61ffff16821115610fd55760405162461bcd60e51b815260206004820152600960248201526868696768206665657360b81b60448201526064016105f0565b6001600160a01b0384811660009081526008602052604090205416331461103e5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920436f6c6c656374696f6e2061646d696e2063616e2075706461746560448201526064016105f0565b604080516060810182526001600160a01b038516815260208101849052908101600090526001600160a01b03858116600090815260086020908152604091829020845181546001600160a01b0319169416939093178355830151600180840191909155908301516002830180549192909160ff19169083818111156110c5576110c5611957565b021790555050604080516001600160a01b03868116825260208201869052871692507f1e37bc437a6eef66beaf65888fcbb24a15cbac885105fc4b3cb99f3e1a90da21910160405180910390a250505050565b8115611160576001600160a01b0380821660009081526008602090815260408083205490931680835260079091529181208054859290611159908490611b87565b9091555050505b8215610484576004546001600160a01b031660009081526007602052604081208054859290611190908490611b87565b9091555050505050565b60006111a4825490565b92915050565b60006111b68383611493565b9392505050565b6000546001600160a01b031633146105945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f0565b600054600160a01b900460ff166105945760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105f0565b61126f611217565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156105945760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105f0565b60026001540361135b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f0565b6002600155565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104849084906114bd565b6001600160a01b038116600090815260018301602052604081205415156111b6565b60006111b6836001600160a01b038416611592565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114436112bc565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861129f3390565b60006111b6836001600160a01b03841661168c565b60008260000182815481106114aa576114aa611bc3565b9060005260206000200154905092915050565b6000611512826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116db9092919063ffffffff16565b90508051600014806115335750808060200190518101906115339190611ca5565b6104845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105f0565b6000818152600183016020526040812054801561167b5760006115b6600183611b9a565b85549091506000906115ca90600190611b9a565b905081811461162f5760008660000182815481106115ea576115ea611bc3565b906000526020600020015490508087600001848154811061160d5761160d611bc3565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061164057611640611d12565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111a4565b60009150506111a4565b5092915050565b60008181526001830160205260408120546116d3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111a4565b5060006111a4565b60606116ea84846000856116f2565b949350505050565b6060824710156117535760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105f0565b600080866001600160a01b0316858760405161176f9190611d4c565b60006040518083038185875af1925050503d80600081146117ac576040519150601f19603f3d011682016040523d82523d6000602084013e6117b1565b606091505b50915091506117c2878383876117cd565b979650505050505050565b6060831561183c578251600003611835576001600160a01b0385163b6118355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f0565b50816116ea565b6116ea83838151156118515781518083602001fd5b8060405162461bcd60e51b81526004016105f09190611d68565b80356001600160a01b038116811461188257600080fd5b919050565b60008060006060848603121561189c57600080fd5b6118a58461186b565b95602085013595506040909401359392505050565b6000806000606084860312156118cf57600080fd5b83359250602084013591506118e66040850161186b565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156119305783516001600160a01b03168352928401929184019160010161190b565b50909695505050505050565b60006020828403121561194e57600080fd5b6111b68261186b565b634e487b7160e01b600052602160045260246000fd5b6002811061198b57634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526020808301519082015260408083015160608301916116859084018261196d565b60008083601f8401126119cf57600080fd5b50813567ffffffffffffffff8111156119e757600080fd5b6020830191508360208285010111156119ff57600080fd5b9250929050565b600080600060408486031215611a1b57600080fd5b611a248461186b565b9250602084013567ffffffffffffffff811115611a4057600080fd5b611a4c868287016119bd565b9497909650939450505050565b600080600060608486031215611a6e57600080fd5b611a778461186b565b9250611a856020850161186b565b9150604084013590509250925092565b803561ffff8116811461188257600080fd5b600060208284031215611ab957600080fd5b6111b682611a95565b600080600080600060808688031215611ada57600080fd5b611ae38661186b565b9450602086013567ffffffffffffffff811115611aff57600080fd5b611b0b888289016119bd565b9095509350611b1e905060408701611a95565b9150611b2c60608701611a95565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176111a4576111a4611b38565b600082611b8257634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156111a4576111a4611b38565b818103818111156111a4576111a4611b38565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252600f908201526e21b0b63632b910109e9020b236b4b760891b604082015260600190565b60208082526018908201527f436f6c6c656374696f6e206e6f7420737570706f727465640000000000000000604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b611c6c818561196d565b604060208201526000611c83604083018486611c39565b95945050505050565b600060208284031215611c9e57600080fd5b5051919050565b600060208284031215611cb757600080fd5b815180151581146111b657600080fd5b61ffff82811682821603908082111561168557611685611b38565b606081526000611cf6606083018688611c39565b61ffff9485166020840152929093166040909101529392505050565b634e487b7160e01b600052603160045260246000fd5b60005b83811015611d43578181015183820152602001611d2b565b50506000910152565b60008251611d5e818460208701611d28565b9190910192915050565b6020815260008251806020840152611d87816040850160208701611d28565b601f01601f1916919091016040019291505056fea2646970667358221220aef998a6b649392c937274dd5d63760d1009dbb8f9cf1fb4306fb4afe78ce13764736f6c63430008180033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addCollection(address,address,uint256)": {
        "params": {
          "_collection": "address of the collection",
          "_collectionAddress": "address of the royalty fees receiver",
          "_royaltyFees": "uint256 of the royalty fees"
        }
      },
      "constructor": {
        "params": {
          "_WETH": "address of the _WETH token",
          "_admin": "address of the proxy admin",
          "_protocolFee": "fee to be in counts of 100: 1% == 100, 10% = 1000",
          "_revenueCollector": "address of the revenue collector"
        }
      },
      "getCollectionData(address)": {
        "params": {
          "_collection": "address to check offer from"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverToken(address)": {
        "params": {
          "_token": "address of the token to recover"
        }
      },
      "removeCollection(address)": {
        "params": {
          "_collection": "address of the collection"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdmin(address)": {
        "params": {
          "_newAdmin": "address of the new admin"
        }
      },
      "updateCollection(address,address,uint256)": {
        "params": {
          "_collection": "address of the collection",
          "_collectionAddress": "address of the royalty fees receiver",
          "_royaltyFees": "uint256 of the royalty fees"
        }
      },
      "updateProxyAdmin(address)": {
        "params": {
          "_newAdmin": "address of the new admin"
        }
      },
      "updateRevenueCollector(address)": {
        "params": {
          "_newRevenueCollector": "address of the new revenue collector"
        }
      },
      "updateprotocolFee(uint16)": {
        "params": {
          "_newprotocolFee": "uint16 of the new protocol fee"
        }
      },
      "verifyCollectionStatus(address,string)": {
        "params": {
          "_collection": "address of the collection"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollection(address,address,uint256)": {
        "notice": "Add a collection to the Protocol"
      },
      "constructor": {
        "notice": "Constructor for the Protocol"
      },
      "getAccountRevenue(address)": {
        "notice": "All read functions"
      },
      "getCollectionData(address)": {
        "notice": "a public getter function to get a collection information from the collection mapping"
      },
      "getSupportedCollections()": {
        "notice": "Get all collections supported by the Protocol"
      },
      "recoverToken(address)": {
        "notice": "recover any ERC20 token sent to the contract"
      },
      "removeCollection(address)": {
        "notice": "Remove a collection from the Protocol"
      },
      "updateAdmin(address)": {
        "notice": "update the admin address"
      },
      "updateCollection(address,address,uint256)": {
        "notice": "Update a collection to the Protocol"
      },
      "updateProxyAdmin(address)": {
        "notice": "update the proxy admin address"
      },
      "updateRevenueCollector(address)": {
        "notice": "update the revenue collector address"
      },
      "updateprotocolFee(uint16)": {
        "notice": "update the protocol fee"
      },
      "verifyCollectionStatus(address,string)": {
        "notice": "Verify a collection from the Protocol"
      },
      "withdrawRevenue()": {
        "notice": "Withdraw revenue generated from the Protocol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2571,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 2573,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "admin",
        "offset": 2,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2581,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "proxyAdmin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2583,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "revenueCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2689,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "collections",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)2246_storage"
      },
      {
        "astId": 2693,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "revenue",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2698,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "collection",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Collection)2686_storage)"
      },
      {
        "astId": 2702,
        "contract": "contracts/Protocol.sol:DistantFinance",
        "label": "isProtocol",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Status)2586": {
        "encoding": "inplace",
        "label": "enum DistantFinance.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Collection)2686_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DistantFinance.Collection)",
        "numberOfBytes": "32",
        "value": "t_struct(Collection)2686_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2246_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2245,
            "contract": "contracts/Protocol.sol:DistantFinance",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1931_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Collection)2686_storage": {
        "encoding": "inplace",
        "label": "struct DistantFinance.Collection",
        "members": [
          {
            "astId": 2680,
            "contract": "contracts/Protocol.sol:DistantFinance",
            "label": "collectionAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2682,
            "contract": "contracts/Protocol.sol:DistantFinance",
            "label": "royaltyFees",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2685,
            "contract": "contracts/Protocol.sol:DistantFinance",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Status)2586"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1931_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1926,
            "contract": "contracts/Protocol.sol:DistantFinance",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1930,
            "contract": "contracts/Protocol.sol:DistantFinance",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}